
newbl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001774  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00011774  2**0
                  CONTENTS
  2 .bss          000003a0  20000000  20000000  00020000  2**2
                  ALLOC
  3 .stack        00002000  200003a0  200003a0  00020000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00011774  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0001179c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001d3bf  00000000  00000000  000117f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e57  00000000  00000000  0002ebb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000f25e  00000000  00000000  00031a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b90  00000000  00000000  00040c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001098  00000000  00000000  000417f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001de01  00000000  00000000  00042891  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010819  00000000  00000000  00060692  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00097bc5  00000000  00000000  00070eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f74  00000000  00000000  00108a70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 23 00 20 29 03 00 00 25 03 00 00 25 03 00 00     .#. )...%...%...
	...
      2c:	25 03 00 00 00 00 00 00 00 00 00 00 25 03 00 00     %...........%...
      3c:	25 03 00 00 25 03 00 00 25 03 00 00 25 03 00 00     %...%...%...%...
      4c:	25 03 00 00 25 03 00 00 25 03 00 00 91 14 00 00     %...%...%.......
      5c:	25 03 00 00 25 03 00 00 25 03 00 00 25 03 00 00     %...%...%...%...
      6c:	25 03 00 00 25 03 00 00 25 03 00 00 25 03 00 00     %...%...%...%...
      7c:	25 03 00 00 25 03 00 00 25 03 00 00 25 03 00 00     %...%...%...%...
      8c:	25 03 00 00 25 03 00 00 25 03 00 00 25 03 00 00     %...%...%...%...
      9c:	25 03 00 00 25 03 00 00 25 03 00 00 25 03 00 00     %...%...%...%...
      ac:	25 03 00 00 25 03 00 00 25 03 00 00 25 03 00 00     %...%...%...%...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000000 	.word	0x20000000
      dc:	00000000 	.word	0x00000000
      e0:	00001774 	.word	0x00001774

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000004 	.word	0x20000004
     110:	00001774 	.word	0x00001774
     114:	00001774 	.word	0x00001774
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b01      	ldr	r3, [pc, #4]	; (124 <atmel_start_init+0x8>)
     120:	4798      	blx	r3
}
     122:	bd10      	pop	{r4, pc}
     124:	00000471 	.word	0x00000471

00000128 <sum32>:
#include "boot.h"
uint32_t sum32(uint8_t*data, uint16_t len){
	uint32_t sum = 0x0000;
	uint16_t i;
	for(i=0;i<len;i++){
     128:	2900      	cmp	r1, #0
     12a:	d00b      	beq.n	144 <sum32+0x1c>
     12c:	0003      	movs	r3, r0
     12e:	3901      	subs	r1, #1
     130:	b289      	uxth	r1, r1
     132:	3101      	adds	r1, #1
     134:	1841      	adds	r1, r0, r1
     136:	2000      	movs	r0, #0
		sum+= data[i];
     138:	781a      	ldrb	r2, [r3, #0]
     13a:	1880      	adds	r0, r0, r2
     13c:	3301      	adds	r3, #1
	for(i=0;i<len;i++){
     13e:	428b      	cmp	r3, r1
     140:	d1fa      	bne.n	138 <sum32+0x10>
	}
	return sum;
}
     142:	4770      	bx	lr
	uint32_t sum = 0x0000;
     144:	2000      	movs	r0, #0
	return sum;
     146:	e7fc      	b.n	142 <sum32+0x1a>

00000148 <err_encode>:
	pack->checksum = checksum;

}


uint16_t err_encode(uint8_t* data, err_t* pack, uint16_t len){
     148:	b510      	push	{r4, lr}
     14a:	000c      	movs	r4, r1
	pack->header.header = 0x55;
     14c:	2355      	movs	r3, #85	; 0x55
     14e:	700b      	strb	r3, [r1, #0]
	pack->header.packet_type = PACK_ERR_ID;
     150:	3b54      	subs	r3, #84	; 0x54
     152:	708b      	strb	r3, [r1, #2]
	pack->header.len = sizeof(err_t)-1-1;
     154:	3304      	adds	r3, #4
     156:	704b      	strb	r3, [r1, #1]
	return sum32(pack, len);
     158:	2103      	movs	r1, #3
     15a:	0020      	movs	r0, r4
     15c:	4b05      	ldr	r3, [pc, #20]	; (174 <err_encode+0x2c>)
     15e:	4798      	blx	r3
	pack->checksum = check_function(pack, (sizeof(err_t) -4));
     160:	70e0      	strb	r0, [r4, #3]
     162:	0a02      	lsrs	r2, r0, #8
     164:	7122      	strb	r2, [r4, #4]
     166:	0c02      	lsrs	r2, r0, #16
     168:	7162      	strb	r2, [r4, #5]
     16a:	0e00      	lsrs	r0, r0, #24
     16c:	71a0      	strb	r0, [r4, #6]
	return sizeof(err_t);
}
     16e:	2007      	movs	r0, #7
     170:	bd10      	pop	{r4, pc}
     172:	46c0      	nop			; (mov r8, r8)
     174:	00000129 	.word	0x00000129

00000178 <bl_get_ver_encode>:
	pack->checksum = check_function(pack, (sizeof(err_ack_t) -4));
	return sizeof(err_ack_t);
}


uint16_t bl_get_ver_encode(uint8_t* data, bl_get_ver_t* pack, uint16_t len){
     178:	b510      	push	{r4, lr}
     17a:	000c      	movs	r4, r1
	pack->header.header = 0x55;
     17c:	2355      	movs	r3, #85	; 0x55
     17e:	700b      	strb	r3, [r1, #0]
	pack->header.packet_type = PACK_BL_GET_VER_ID;
     180:	3b52      	subs	r3, #82	; 0x52
     182:	708b      	strb	r3, [r1, #2]
	pack->header.len = sizeof(bl_get_ver_t)-1-1;
     184:	3302      	adds	r3, #2
     186:	704b      	strb	r3, [r1, #1]
	return sum32(pack, len);
     188:	2103      	movs	r1, #3
     18a:	0020      	movs	r0, r4
     18c:	4b05      	ldr	r3, [pc, #20]	; (1a4 <bl_get_ver_encode+0x2c>)
     18e:	4798      	blx	r3
	pack->checksum = check_function(pack, (sizeof(bl_get_ver_t) -4));
     190:	70e0      	strb	r0, [r4, #3]
     192:	0a02      	lsrs	r2, r0, #8
     194:	7122      	strb	r2, [r4, #4]
     196:	0c02      	lsrs	r2, r0, #16
     198:	7162      	strb	r2, [r4, #5]
     19a:	0e00      	lsrs	r0, r0, #24
     19c:	71a0      	strb	r0, [r4, #6]
	return sizeof(bl_get_ver_t);
}
     19e:	2007      	movs	r0, #7
     1a0:	bd10      	pop	{r4, pc}
     1a2:	46c0      	nop			; (mov r8, r8)
     1a4:	00000129 	.word	0x00000129

000001a8 <bl_get_ver_ack_encode>:


uint16_t bl_get_ver_ack_encode(uint8_t* data, bl_get_ver_ack_t* pack, uint16_t len){
     1a8:	b510      	push	{r4, lr}
     1aa:	000c      	movs	r4, r1
	pack->header.header = 0x55;
     1ac:	2355      	movs	r3, #85	; 0x55
     1ae:	700b      	strb	r3, [r1, #0]
	pack->header.packet_type = PACK_BL_GET_VER_ACK_ID;
     1b0:	3b51      	subs	r3, #81	; 0x51
     1b2:	708b      	strb	r3, [r1, #2]
	pack->header.len = sizeof(bl_get_ver_ack_t)-1-1;
     1b4:	3304      	adds	r3, #4
     1b6:	704b      	strb	r3, [r1, #1]
	return sum32(pack, len);
     1b8:	2106      	movs	r1, #6
     1ba:	0020      	movs	r0, r4
     1bc:	4b05      	ldr	r3, [pc, #20]	; (1d4 <bl_get_ver_ack_encode+0x2c>)
     1be:	4798      	blx	r3
	pack->checksum = check_function(pack, (sizeof(bl_get_ver_ack_t) -4));
     1c0:	71a0      	strb	r0, [r4, #6]
     1c2:	0a02      	lsrs	r2, r0, #8
     1c4:	71e2      	strb	r2, [r4, #7]
     1c6:	0c02      	lsrs	r2, r0, #16
     1c8:	7222      	strb	r2, [r4, #8]
     1ca:	0e00      	lsrs	r0, r0, #24
     1cc:	7260      	strb	r0, [r4, #9]
	return sizeof(bl_get_ver_ack_t);
}
     1ce:	200a      	movs	r0, #10
     1d0:	bd10      	pop	{r4, pc}
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	00000129 	.word	0x00000129

000001d8 <bl_get_id_encode>:


uint16_t bl_get_id_encode(uint8_t* data, bl_get_id_t* pack, uint16_t len){
     1d8:	b510      	push	{r4, lr}
     1da:	000c      	movs	r4, r1
	pack->header.header = 0x55;
     1dc:	2355      	movs	r3, #85	; 0x55
     1de:	700b      	strb	r3, [r1, #0]
	pack->header.packet_type = PACK_BL_GET_ID_ID;
     1e0:	3b50      	subs	r3, #80	; 0x50
     1e2:	708b      	strb	r3, [r1, #2]
	pack->header.len = sizeof(bl_get_id_t)-1-1;
     1e4:	704b      	strb	r3, [r1, #1]
	return sum32(pack, len);
     1e6:	2103      	movs	r1, #3
     1e8:	0020      	movs	r0, r4
     1ea:	4b05      	ldr	r3, [pc, #20]	; (200 <bl_get_id_encode+0x28>)
     1ec:	4798      	blx	r3
	pack->checksum = check_function(pack, (sizeof(bl_get_id_t) -4));
     1ee:	70e0      	strb	r0, [r4, #3]
     1f0:	0a02      	lsrs	r2, r0, #8
     1f2:	7122      	strb	r2, [r4, #4]
     1f4:	0c02      	lsrs	r2, r0, #16
     1f6:	7162      	strb	r2, [r4, #5]
     1f8:	0e00      	lsrs	r0, r0, #24
     1fa:	71a0      	strb	r0, [r4, #6]
	return sizeof(bl_get_id_t);
}
     1fc:	2007      	movs	r0, #7
     1fe:	bd10      	pop	{r4, pc}
     200:	00000129 	.word	0x00000129

00000204 <bl_get_id_ack_encode>:


uint16_t bl_get_id_ack_encode(uint8_t* data, bl_get_id_ack_t* pack, uint16_t len){
     204:	b510      	push	{r4, lr}
     206:	000c      	movs	r4, r1
	pack->header.header = 0x55;
     208:	2355      	movs	r3, #85	; 0x55
     20a:	700b      	strb	r3, [r1, #0]
	pack->header.packet_type = PACK_BL_GET_ID_ACK_ID;
     20c:	3b4f      	subs	r3, #79	; 0x4f
     20e:	708b      	strb	r3, [r1, #2]
	pack->header.len = sizeof(bl_get_id_ack_t)-1-1;
     210:	3303      	adds	r3, #3
     212:	704b      	strb	r3, [r1, #1]
	return sum32(pack, len);
     214:	2107      	movs	r1, #7
     216:	0020      	movs	r0, r4
     218:	4b05      	ldr	r3, [pc, #20]	; (230 <bl_get_id_ack_encode+0x2c>)
     21a:	4798      	blx	r3
	pack->checksum = check_function(pack, (sizeof(bl_get_id_ack_t) -4));
     21c:	71e0      	strb	r0, [r4, #7]
     21e:	0a02      	lsrs	r2, r0, #8
     220:	7222      	strb	r2, [r4, #8]
     222:	0c02      	lsrs	r2, r0, #16
     224:	7262      	strb	r2, [r4, #9]
     226:	0e00      	lsrs	r0, r0, #24
     228:	72a0      	strb	r0, [r4, #10]
	return sizeof(bl_get_id_ack_t);
}
     22a:	200b      	movs	r0, #11
     22c:	bd10      	pop	{r4, pc}
     22e:	46c0      	nop			; (mov r8, r8)
     230:	00000129 	.word	0x00000129

00000234 <bl_mem_erase_ack_encode>:
	pack->checksum = check_function(pack, (sizeof(bl_mem_erase_t) -4));
	return sizeof(bl_mem_erase_t);
}


uint16_t bl_mem_erase_ack_encode(uint8_t* data, bl_mem_erase_ack_t* pack, uint16_t len){
     234:	b510      	push	{r4, lr}
     236:	000c      	movs	r4, r1
	pack->header.header = 0x55;
     238:	2355      	movs	r3, #85	; 0x55
     23a:	700b      	strb	r3, [r1, #0]
	pack->header.packet_type = PACK_BL_MEM_ERASE_ACK_ID;
     23c:	3b4b      	subs	r3, #75	; 0x4b
     23e:	708b      	strb	r3, [r1, #2]
	pack->header.len = sizeof(bl_mem_erase_ack_t)-1-1;
     240:	3b04      	subs	r3, #4
     242:	704b      	strb	r3, [r1, #1]
	return sum32(pack, len);
     244:	2104      	movs	r1, #4
     246:	0020      	movs	r0, r4
     248:	4b05      	ldr	r3, [pc, #20]	; (260 <bl_mem_erase_ack_encode+0x2c>)
     24a:	4798      	blx	r3
	pack->checksum = check_function(pack, (sizeof(bl_mem_erase_ack_t) -4));
     24c:	7120      	strb	r0, [r4, #4]
     24e:	0a03      	lsrs	r3, r0, #8
     250:	7163      	strb	r3, [r4, #5]
     252:	0c03      	lsrs	r3, r0, #16
     254:	71a3      	strb	r3, [r4, #6]
     256:	0e00      	lsrs	r0, r0, #24
     258:	71e0      	strb	r0, [r4, #7]
	return sizeof(bl_mem_erase_ack_t);
}
     25a:	2008      	movs	r0, #8
     25c:	bd10      	pop	{r4, pc}
     25e:	46c0      	nop			; (mov r8, r8)
     260:	00000129 	.word	0x00000129

00000264 <bl_mem_write_ack_encode>:
	pack->checksum = check_function(pack, (sizeof(bl_mem_write_t) -4));
	return sizeof(bl_mem_write_t);
}


uint16_t bl_mem_write_ack_encode(uint8_t* data, bl_mem_write_ack_t* pack, uint16_t len){
     264:	b510      	push	{r4, lr}
     266:	000c      	movs	r4, r1
	pack->header.header = 0x55;
     268:	2355      	movs	r3, #85	; 0x55
     26a:	700b      	strb	r3, [r1, #0]
	pack->header.packet_type = PACK_BL_MEM_WRITE_ACK_ID;
     26c:	3b49      	subs	r3, #73	; 0x49
     26e:	708b      	strb	r3, [r1, #2]
	pack->header.len = sizeof(bl_mem_write_ack_t)-1-1;
     270:	3b06      	subs	r3, #6
     272:	704b      	strb	r3, [r1, #1]
	return sum32(pack, len);
     274:	2104      	movs	r1, #4
     276:	0020      	movs	r0, r4
     278:	4b05      	ldr	r3, [pc, #20]	; (290 <bl_mem_write_ack_encode+0x2c>)
     27a:	4798      	blx	r3
	pack->checksum = check_function(pack, (sizeof(bl_mem_write_ack_t) -4));
     27c:	7120      	strb	r0, [r4, #4]
     27e:	0a03      	lsrs	r3, r0, #8
     280:	7163      	strb	r3, [r4, #5]
     282:	0c03      	lsrs	r3, r0, #16
     284:	71a3      	strb	r3, [r4, #6]
     286:	0e00      	lsrs	r0, r0, #24
     288:	71e0      	strb	r0, [r4, #7]
	return sizeof(bl_mem_write_ack_t);
}
     28a:	2008      	movs	r0, #8
     28c:	bd10      	pop	{r4, pc}
     28e:	46c0      	nop			; (mov r8, r8)
     290:	00000129 	.word	0x00000129

00000294 <bl_mem_read_encode>:


uint16_t bl_mem_read_encode(uint8_t* data, bl_mem_read_t* pack, uint16_t len){
     294:	b510      	push	{r4, lr}
     296:	000c      	movs	r4, r1
	pack->header.header = 0x55;
     298:	2355      	movs	r3, #85	; 0x55
     29a:	700b      	strb	r3, [r1, #0]
	pack->header.packet_type = PACK_BL_MEM_READ_ID;
     29c:	3b48      	subs	r3, #72	; 0x48
     29e:	708b      	strb	r3, [r1, #2]
	pack->header.len = sizeof(bl_mem_read_t)-1-1;
     2a0:	704b      	strb	r3, [r1, #1]
	return sum32(pack, len);
     2a2:	210b      	movs	r1, #11
     2a4:	0020      	movs	r0, r4
     2a6:	4b05      	ldr	r3, [pc, #20]	; (2bc <bl_mem_read_encode+0x28>)
     2a8:	4798      	blx	r3
	pack->checksum = check_function(pack, (sizeof(bl_mem_read_t) -4));
     2aa:	72e0      	strb	r0, [r4, #11]
     2ac:	0a02      	lsrs	r2, r0, #8
     2ae:	7322      	strb	r2, [r4, #12]
     2b0:	0c02      	lsrs	r2, r0, #16
     2b2:	7362      	strb	r2, [r4, #13]
     2b4:	0e00      	lsrs	r0, r0, #24
     2b6:	73a0      	strb	r0, [r4, #14]
	return sizeof(bl_mem_read_t);
}
     2b8:	200f      	movs	r0, #15
     2ba:	bd10      	pop	{r4, pc}
     2bc:	00000129 	.word	0x00000129

000002c0 <bl_mem_read_ack_encode>:


uint16_t bl_mem_read_ack_encode(uint8_t* data, bl_mem_read_ack_t* pack, uint16_t len){
     2c0:	b510      	push	{r4, lr}
     2c2:	000c      	movs	r4, r1
	pack->header.header = 0x55;
     2c4:	2355      	movs	r3, #85	; 0x55
     2c6:	700b      	strb	r3, [r1, #0]
	pack->header.packet_type = PACK_BL_MEM_READ_ACK_ID;
     2c8:	3b47      	subs	r3, #71	; 0x47
     2ca:	708b      	strb	r3, [r1, #2]
	pack->header.len = sizeof(bl_mem_read_ack_t)-1-1;
     2cc:	3379      	adds	r3, #121	; 0x79
     2ce:	704b      	strb	r3, [r1, #1]
	return sum32(pack, len);
     2d0:	2185      	movs	r1, #133	; 0x85
     2d2:	0020      	movs	r0, r4
     2d4:	4b06      	ldr	r3, [pc, #24]	; (2f0 <bl_mem_read_ack_encode+0x30>)
     2d6:	4798      	blx	r3
	pack->checksum = check_function(pack, (sizeof(bl_mem_read_ack_t) -4));
     2d8:	2385      	movs	r3, #133	; 0x85
     2da:	54e0      	strb	r0, [r4, r3]
     2dc:	0a03      	lsrs	r3, r0, #8
     2de:	3485      	adds	r4, #133	; 0x85
     2e0:	7063      	strb	r3, [r4, #1]
     2e2:	0c03      	lsrs	r3, r0, #16
     2e4:	70a3      	strb	r3, [r4, #2]
     2e6:	0e00      	lsrs	r0, r0, #24
     2e8:	70e0      	strb	r0, [r4, #3]
	return sizeof(bl_mem_read_ack_t);
}
     2ea:	2089      	movs	r0, #137	; 0x89
     2ec:	bd10      	pop	{r4, pc}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	00000129 	.word	0x00000129

000002f4 <bl_reset_ack_encode>:
	pack->checksum = check_function(pack, (sizeof(bl_reset_t) -4));
	return sizeof(bl_reset_t);
}


uint16_t bl_reset_ack_encode(uint8_t* data, bl_reset_ack_t* pack, uint16_t len){
     2f4:	b510      	push	{r4, lr}
     2f6:	000c      	movs	r4, r1
	pack->header.header = 0x55;
     2f8:	2355      	movs	r3, #85	; 0x55
     2fa:	700b      	strb	r3, [r1, #0]
	pack->header.packet_type = PACK_BL_RESET_ACK_ID;
     2fc:	3b45      	subs	r3, #69	; 0x45
     2fe:	708b      	strb	r3, [r1, #2]
	pack->header.len = sizeof(bl_reset_ack_t)-1-1;
     300:	3b0a      	subs	r3, #10
     302:	704b      	strb	r3, [r1, #1]
	return sum32(pack, len);
     304:	2104      	movs	r1, #4
     306:	0020      	movs	r0, r4
     308:	4b05      	ldr	r3, [pc, #20]	; (320 <bl_reset_ack_encode+0x2c>)
     30a:	4798      	blx	r3
	pack->checksum = check_function(pack, (sizeof(bl_reset_ack_t) -4));
     30c:	7120      	strb	r0, [r4, #4]
     30e:	0a03      	lsrs	r3, r0, #8
     310:	7163      	strb	r3, [r4, #5]
     312:	0c03      	lsrs	r3, r0, #16
     314:	71a3      	strb	r3, [r4, #6]
     316:	0e00      	lsrs	r0, r0, #24
     318:	71e0      	strb	r0, [r4, #7]
	return sizeof(bl_reset_ack_t);
}
     31a:	2008      	movs	r0, #8
     31c:	bd10      	pop	{r4, pc}
     31e:	46c0      	nop			; (mov r8, r8)
     320:	00000129 	.word	0x00000129

00000324 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     324:	e7fe      	b.n	324 <Dummy_Handler>
	...

00000328 <Reset_Handler>:
{
     328:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     32a:	4a17      	ldr	r2, [pc, #92]	; (388 <Reset_Handler+0x60>)
     32c:	4b17      	ldr	r3, [pc, #92]	; (38c <Reset_Handler+0x64>)
     32e:	429a      	cmp	r2, r3
     330:	d011      	beq.n	356 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     332:	001a      	movs	r2, r3
     334:	4b16      	ldr	r3, [pc, #88]	; (390 <Reset_Handler+0x68>)
     336:	429a      	cmp	r2, r3
     338:	d20d      	bcs.n	356 <Reset_Handler+0x2e>
     33a:	4a16      	ldr	r2, [pc, #88]	; (394 <Reset_Handler+0x6c>)
     33c:	3303      	adds	r3, #3
     33e:	1a9b      	subs	r3, r3, r2
     340:	089b      	lsrs	r3, r3, #2
     342:	3301      	adds	r3, #1
     344:	009b      	lsls	r3, r3, #2
     346:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     348:	4810      	ldr	r0, [pc, #64]	; (38c <Reset_Handler+0x64>)
     34a:	490f      	ldr	r1, [pc, #60]	; (388 <Reset_Handler+0x60>)
     34c:	588c      	ldr	r4, [r1, r2]
     34e:	5084      	str	r4, [r0, r2]
     350:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     352:	429a      	cmp	r2, r3
     354:	d1fa      	bne.n	34c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     356:	4a10      	ldr	r2, [pc, #64]	; (398 <Reset_Handler+0x70>)
     358:	4b10      	ldr	r3, [pc, #64]	; (39c <Reset_Handler+0x74>)
     35a:	429a      	cmp	r2, r3
     35c:	d20a      	bcs.n	374 <Reset_Handler+0x4c>
     35e:	43d3      	mvns	r3, r2
     360:	490e      	ldr	r1, [pc, #56]	; (39c <Reset_Handler+0x74>)
     362:	185b      	adds	r3, r3, r1
     364:	2103      	movs	r1, #3
     366:	438b      	bics	r3, r1
     368:	3304      	adds	r3, #4
     36a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     36c:	2100      	movs	r1, #0
     36e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     370:	4293      	cmp	r3, r2
     372:	d1fc      	bne.n	36e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     374:	4a0a      	ldr	r2, [pc, #40]	; (3a0 <Reset_Handler+0x78>)
     376:	21ff      	movs	r1, #255	; 0xff
     378:	4b0a      	ldr	r3, [pc, #40]	; (3a4 <Reset_Handler+0x7c>)
     37a:	438b      	bics	r3, r1
     37c:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     37e:	4b0a      	ldr	r3, [pc, #40]	; (3a8 <Reset_Handler+0x80>)
     380:	4798      	blx	r3
        main();
     382:	4b0a      	ldr	r3, [pc, #40]	; (3ac <Reset_Handler+0x84>)
     384:	4798      	blx	r3
     386:	e7fe      	b.n	386 <Reset_Handler+0x5e>
     388:	00001774 	.word	0x00001774
     38c:	20000000 	.word	0x20000000
     390:	20000000 	.word	0x20000000
     394:	20000004 	.word	0x20000004
     398:	20000000 	.word	0x20000000
     39c:	200003a0 	.word	0x200003a0
     3a0:	e000ed00 	.word	0xe000ed00
     3a4:	00000000 	.word	0x00000000
     3a8:	00001629 	.word	0x00001629
     3ac:	00000bb5 	.word	0x00000bb5

000003b0 <FLASH_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     3b0:	4a02      	ldr	r2, [pc, #8]	; (3bc <FLASH_0_CLOCK_init+0xc>)
     3b2:	6913      	ldr	r3, [r2, #16]
     3b4:	2120      	movs	r1, #32
     3b6:	430b      	orrs	r3, r1
     3b8:	6113      	str	r3, [r2, #16]

void FLASH_0_CLOCK_init(void)
{

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}
     3ba:	4770      	bx	lr
     3bc:	40000800 	.word	0x40000800

000003c0 <FLASH_0_init>:

void FLASH_0_init(void)
{
     3c0:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
     3c2:	4b03      	ldr	r3, [pc, #12]	; (3d0 <FLASH_0_init+0x10>)
     3c4:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     3c6:	4903      	ldr	r1, [pc, #12]	; (3d4 <FLASH_0_init+0x14>)
     3c8:	4803      	ldr	r0, [pc, #12]	; (3d8 <FLASH_0_init+0x18>)
     3ca:	4b04      	ldr	r3, [pc, #16]	; (3dc <FLASH_0_init+0x1c>)
     3cc:	4798      	blx	r3
}
     3ce:	bd10      	pop	{r4, pc}
     3d0:	000003b1 	.word	0x000003b1
     3d4:	41004000 	.word	0x41004000
     3d8:	20000024 	.word	0x20000024
     3dc:	00000d6d 	.word	0x00000d6d

000003e0 <EDBG_COM_PORT_init>:

void EDBG_COM_PORT_init(void)
{
     3e0:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3e2:	2382      	movs	r3, #130	; 0x82
     3e4:	05db      	lsls	r3, r3, #23
     3e6:	2251      	movs	r2, #81	; 0x51
     3e8:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ea:	2401      	movs	r4, #1
     3ec:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ee:	2001      	movs	r0, #1
     3f0:	4301      	orrs	r1, r0
     3f2:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3f4:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3f6:	3a19      	subs	r2, #25
     3f8:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3fa:	250f      	movs	r5, #15
     3fc:	4029      	ands	r1, r5
	tmp |= PORT_PMUX_PMUXO(data);
     3fe:	3511      	adds	r5, #17
     400:	4329      	orrs	r1, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     402:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     404:	2152      	movs	r1, #82	; 0x52
     406:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     408:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     40a:	4302      	orrs	r2, r0
     40c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     40e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     410:	3919      	subs	r1, #25
     412:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     414:	200f      	movs	r0, #15
     416:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     418:	380d      	subs	r0, #13
     41a:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     41c:	545a      	strb	r2, [r3, r1]

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
}
     41e:	bd30      	pop	{r4, r5, pc}

00000420 <EDBG_COM_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     420:	4b06      	ldr	r3, [pc, #24]	; (43c <EDBG_COM_CLOCK_init+0x1c>)
     422:	2140      	movs	r1, #64	; 0x40
     424:	22d0      	movs	r2, #208	; 0xd0
     426:	5099      	str	r1, [r3, r2]
     428:	3103      	adds	r1, #3
     42a:	3a08      	subs	r2, #8
     42c:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM1;
     42e:	4a04      	ldr	r2, [pc, #16]	; (440 <EDBG_COM_CLOCK_init+0x20>)
     430:	69d3      	ldr	r3, [r2, #28]
     432:	393f      	subs	r1, #63	; 0x3f
     434:	430b      	orrs	r3, r1
     436:	61d3      	str	r3, [r2, #28]
void EDBG_COM_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM1_bit(MCLK);
}
     438:	4770      	bx	lr
     43a:	46c0      	nop			; (mov r8, r8)
     43c:	40001c00 	.word	0x40001c00
     440:	40000800 	.word	0x40000800

00000444 <EDBG_COM_init>:

void EDBG_COM_init(void)
{
     444:	b510      	push	{r4, lr}
	EDBG_COM_CLOCK_init();
     446:	4b05      	ldr	r3, [pc, #20]	; (45c <EDBG_COM_init+0x18>)
     448:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, SERCOM1, (void *)NULL);
     44a:	2200      	movs	r2, #0
     44c:	4904      	ldr	r1, [pc, #16]	; (460 <EDBG_COM_init+0x1c>)
     44e:	4805      	ldr	r0, [pc, #20]	; (464 <EDBG_COM_init+0x20>)
     450:	4b05      	ldr	r3, [pc, #20]	; (468 <EDBG_COM_init+0x24>)
     452:	4798      	blx	r3
	EDBG_COM_PORT_init();
     454:	4b05      	ldr	r3, [pc, #20]	; (46c <EDBG_COM_init+0x28>)
     456:	4798      	blx	r3
}
     458:	bd10      	pop	{r4, pc}
     45a:	46c0      	nop			; (mov r8, r8)
     45c:	00000421 	.word	0x00000421
     460:	42000800 	.word	0x42000800
     464:	20000040 	.word	0x20000040
     468:	00001091 	.word	0x00001091
     46c:	000003e1 	.word	0x000003e1

00000470 <system_init>:

void system_init(void)
{
     470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     472:	4b1a      	ldr	r3, [pc, #104]	; (4dc <system_init+0x6c>)
     474:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     476:	22c0      	movs	r2, #192	; 0xc0
     478:	05d2      	lsls	r2, r2, #23
     47a:	2380      	movs	r3, #128	; 0x80
     47c:	015b      	lsls	r3, r3, #5
     47e:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     480:	6093      	str	r3, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     482:	2382      	movs	r3, #130	; 0x82
     484:	05db      	lsls	r3, r3, #23
     486:	4916      	ldr	r1, [pc, #88]	; (4e0 <system_init+0x70>)
     488:	6299      	str	r1, [r3, #40]	; 0x28
     48a:	26c0      	movs	r6, #192	; 0xc0
     48c:	0636      	lsls	r6, r6, #24
     48e:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     490:	244c      	movs	r4, #76	; 0x4c
     492:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     494:	2001      	movs	r0, #1
     496:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     498:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     49a:	2480      	movs	r4, #128	; 0x80
     49c:	01a4      	lsls	r4, r4, #6
     49e:	6054      	str	r4, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a0:	4910      	ldr	r1, [pc, #64]	; (4e4 <system_init+0x74>)
     4a2:	6299      	str	r1, [r3, #40]	; 0x28
     4a4:	4910      	ldr	r1, [pc, #64]	; (4e8 <system_init+0x78>)
     4a6:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4a8:	6054      	str	r4, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4aa:	214d      	movs	r1, #77	; 0x4d
     4ac:	5c5d      	ldrb	r5, [r3, r1]
     4ae:	2704      	movs	r7, #4
     4b0:	433d      	orrs	r5, r7
     4b2:	545d      	strb	r5, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4b4:	6194      	str	r4, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4b6:	5c5c      	ldrb	r4, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4b8:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ba:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4bc:	2180      	movs	r1, #128	; 0x80
     4be:	0209      	lsls	r1, r1, #8
     4c0:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4c2:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4c4:	4a09      	ldr	r2, [pc, #36]	; (4ec <system_init+0x7c>)
     4c6:	629a      	str	r2, [r3, #40]	; 0x28
     4c8:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ca:	214f      	movs	r1, #79	; 0x4f
     4cc:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ce:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d0:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	FLASH_0_init();
     4d2:	4b07      	ldr	r3, [pc, #28]	; (4f0 <system_init+0x80>)
     4d4:	4798      	blx	r3

	EDBG_COM_init();
     4d6:	4b07      	ldr	r3, [pc, #28]	; (4f4 <system_init+0x84>)
     4d8:	4798      	blx	r3
}
     4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4dc:	00001161 	.word	0x00001161
     4e0:	40001000 	.word	0x40001000
     4e4:	40022000 	.word	0x40022000
     4e8:	c0020000 	.word	0xc0020000
     4ec:	40008000 	.word	0x40008000
     4f0:	000003c1 	.word	0x000003c1
     4f4:	00000445 	.word	0x00000445

000004f8 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
     4f8:	b510      	push	{r4, lr}
     4fa:	b082      	sub	sp, #8
     4fc:	0004      	movs	r4, r0
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     4fe:	a801      	add	r0, sp, #4
     500:	4b0b      	ldr	r3, [pc, #44]	; (530 <_gpio_get_level+0x38>)
     502:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     504:	01e3      	lsls	r3, r4, #7
     506:	22c0      	movs	r2, #192	; 0xc0
     508:	05d2      	lsls	r2, r2, #23
     50a:	589c      	ldr	r4, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     50c:	2282      	movs	r2, #130	; 0x82
     50e:	05d2      	lsls	r2, r2, #23
     510:	189a      	adds	r2, r3, r2
     512:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     514:	21c0      	movs	r1, #192	; 0xc0
     516:	05c9      	lsls	r1, r1, #23
     518:	468c      	mov	ip, r1
     51a:	4463      	add	r3, ip
     51c:	691b      	ldr	r3, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     51e:	4053      	eors	r3, r2
     520:	401c      	ands	r4, r3
     522:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
     524:	a801      	add	r0, sp, #4
     526:	4b03      	ldr	r3, [pc, #12]	; (534 <_gpio_get_level+0x3c>)
     528:	4798      	blx	r3

	return tmp;
}
     52a:	0020      	movs	r0, r4
     52c:	b002      	add	sp, #8
     52e:	bd10      	pop	{r4, pc}
     530:	00000d19 	.word	0x00000d19
     534:	00000d27 	.word	0x00000d27

00000538 <uart_recv>:
		msg_id = packet_parser(pdata,buf,&ps);
		message_decode(pdata,msg_id);
	}
}

void uart_recv(uint8_t* str,uint16_t len){
     538:	b570      	push	{r4, r5, r6, lr}
     53a:	b082      	sub	sp, #8
     53c:	0005      	movs	r5, r0
     53e:	000e      	movs	r6, r1
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&BL_USART_IO, &io);
     540:	4c07      	ldr	r4, [pc, #28]	; (560 <uart_recv+0x28>)
     542:	a901      	add	r1, sp, #4
     544:	0020      	movs	r0, r4
     546:	4b07      	ldr	r3, [pc, #28]	; (564 <uart_recv+0x2c>)
     548:	4798      	blx	r3
	usart_sync_enable(&BL_USART_IO);
     54a:	0020      	movs	r0, r4
     54c:	4b06      	ldr	r3, [pc, #24]	; (568 <uart_recv+0x30>)
     54e:	4798      	blx	r3
	io_read(io, str, len);
     550:	0032      	movs	r2, r6
     552:	0029      	movs	r1, r5
     554:	9801      	ldr	r0, [sp, #4]
     556:	4b05      	ldr	r3, [pc, #20]	; (56c <uart_recv+0x34>)
     558:	4798      	blx	r3
}
     55a:	b002      	add	sp, #8
     55c:	bd70      	pop	{r4, r5, r6, pc}
     55e:	46c0      	nop			; (mov r8, r8)
     560:	20000040 	.word	0x20000040
     564:	00001109 	.word	0x00001109
     568:	000010dd 	.word	0x000010dd
     56c:	00000f79 	.word	0x00000f79

00000570 <uart_send>:

void uart_send(uint8_t* data, uint16_t len){
     570:	b570      	push	{r4, r5, r6, lr}
     572:	b082      	sub	sp, #8
     574:	0005      	movs	r5, r0
     576:	000e      	movs	r6, r1
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&BL_USART_IO, &io);
     578:	4c07      	ldr	r4, [pc, #28]	; (598 <uart_send+0x28>)
     57a:	a901      	add	r1, sp, #4
     57c:	0020      	movs	r0, r4
     57e:	4b07      	ldr	r3, [pc, #28]	; (59c <uart_send+0x2c>)
     580:	4798      	blx	r3
	usart_sync_enable(&BL_USART_IO);
     582:	0020      	movs	r0, r4
     584:	4b06      	ldr	r3, [pc, #24]	; (5a0 <uart_send+0x30>)
     586:	4798      	blx	r3
	io_write(io, data, len);
     588:	0032      	movs	r2, r6
     58a:	0029      	movs	r1, r5
     58c:	9801      	ldr	r0, [sp, #4]
     58e:	4b05      	ldr	r3, [pc, #20]	; (5a4 <uart_send+0x34>)
     590:	4798      	blx	r3
}
     592:	b002      	add	sp, #8
     594:	bd70      	pop	{r4, r5, r6, pc}
     596:	46c0      	nop			; (mov r8, r8)
     598:	20000040 	.word	0x20000040
     59c:	00001109 	.word	0x00001109
     5a0:	000010dd 	.word	0x000010dd
     5a4:	00000f45 	.word	0x00000f45

000005a8 <jump_to_application>:

void jump_to_application(void){

	void (*app_start_address)(void);
	//flash_read(&BL_FLASH_IO,0x5e00,(uint8_t*)&boot_label,sizeof(bootloader_label_t));
	app_start_address = *(uint32_t *)(0x6000 + 4);
     5a8:	4b04      	ldr	r3, [pc, #16]	; (5bc <jump_to_application+0x14>)
     5aa:	681a      	ldr	r2, [r3, #0]
	// To check the app is stored in Flash
	//if (app_start_address == 0xFFFFFFFF) {
	///* Stay in Bootloader */
	//return;
	//}
	__set_MSP(*(uint32_t *) 0x6000); //set the main stack pointer as app address
     5ac:	3b04      	subs	r3, #4
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     5ae:	6819      	ldr	r1, [r3, #0]
     5b0:	f381 8808 	msr	MSP, r1
	//__DMB();
	SCB->VTOR = ((uint32_t)0x6000 & SCB_VTOR_TBLOFF_Msk);  //rebase the vector table
     5b4:	4902      	ldr	r1, [pc, #8]	; (5c0 <jump_to_application+0x18>)
     5b6:	608b      	str	r3, [r1, #8]
	//SCB->VTOR = (uint32_t*) APP_START_ADDRESS;
	//__DSB();
	//bx lr  to app address
	asm("bx %0"::"r"(app_start_address));
     5b8:	4710      	bx	r2
}
     5ba:	4770      	bx	lr
     5bc:	00006004 	.word	0x00006004
     5c0:	e000ed00 	.word	0xe000ed00

000005c4 <bootloader_handle_jump_to_address>:

void bootloader_handle_jump_to_address(uint32_t address)
{
     5c4:	b510      	push	{r4, lr}
     5c6:	2300      	movs	r3, #0
	uint32_t app_start_address;

	//clear all interrupt source
	for(uint8_t i=0;i<8;i++){
		NVIC->ICER[ i ] = 0xFFFFFFFF ;
     5c8:	4c11      	ldr	r4, [pc, #68]	; (610 <bootloader_handle_jump_to_address+0x4c>)
     5ca:	2101      	movs	r1, #1
     5cc:	4249      	negs	r1, r1
     5ce:	001a      	movs	r2, r3
     5d0:	3220      	adds	r2, #32
     5d2:	0092      	lsls	r2, r2, #2
     5d4:	5111      	str	r1, [r2, r4]
     5d6:	3301      	adds	r3, #1
	for(uint8_t i=0;i<8;i++){
     5d8:	2b08      	cmp	r3, #8
     5da:	d1f8      	bne.n	5ce <bootloader_handle_jump_to_address+0xa>
     5dc:	2300      	movs	r3, #0
	}
	for(uint8_t i=0;i<8;i++){
		NVIC->ICPR[ i ] = 0xFFFFFFFF ;
     5de:	4c0c      	ldr	r4, [pc, #48]	; (610 <bootloader_handle_jump_to_address+0x4c>)
     5e0:	2101      	movs	r1, #1
     5e2:	4249      	negs	r1, r1
     5e4:	001a      	movs	r2, r3
     5e6:	3260      	adds	r2, #96	; 0x60
     5e8:	0092      	lsls	r2, r2, #2
     5ea:	5111      	str	r1, [r2, r4]
     5ec:	3301      	adds	r3, #1
	for(uint8_t i=0;i<8;i++){
     5ee:	2b08      	cmp	r3, #8
     5f0:	d1f8      	bne.n	5e4 <bootloader_handle_jump_to_address+0x20>
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
     5f2:	f3ef 8308 	mrs	r3, MSP
	}

	sp = __get_MSP();
     5f6:	4a07      	ldr	r2, [pc, #28]	; (614 <bootloader_handle_jump_to_address+0x50>)
     5f8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     5fa:	6803      	ldr	r3, [r0, #0]
     5fc:	f383 8808 	msr	MSP, r3

	/* Rebase the Stack Pointer */
	__set_MSP(*(uint32_t *) address);

	/* Rebase the vector table base address */
	SCB->VTOR = ((uint32_t) address & SCB_VTOR_TBLOFF_Msk);
     600:	23ff      	movs	r3, #255	; 0xff
     602:	0002      	movs	r2, r0
     604:	439a      	bics	r2, r3
     606:	4b04      	ldr	r3, [pc, #16]	; (618 <bootloader_handle_jump_to_address+0x54>)
     608:	609a      	str	r2, [r3, #8]

	/* Load the Reset Handler address of the application */
	app_start_address = *(uint32_t *)(address + 4);

	/* Jump to application Reset Handler in the application */
	asm("bx %0"::"r"(app_start_address));
     60a:	6843      	ldr	r3, [r0, #4]
     60c:	4718      	bx	r3
}
     60e:	bd10      	pop	{r4, pc}
     610:	e000e100 	.word	0xe000e100
     614:	20000168 	.word	0x20000168
     618:	e000ed00 	.word	0xe000ed00

0000061c <bootloader_handle_getver_cmd>:

void bootloader_handle_getver_cmd(bl_get_ver_t cmd)
{
     61c:	b510      	push	{r4, lr}
     61e:	b086      	sub	sp, #24
	bl_get_ver_ack_t ack;
	ack.major = MAJOR_VER;
     620:	ac03      	add	r4, sp, #12
     622:	2301      	movs	r3, #1
     624:	70e3      	strb	r3, [r4, #3]
	ack.minor = MINOR_VER;
     626:	3301      	adds	r3, #1
     628:	7123      	strb	r3, [r4, #4]
	ack.patch = PATCH_NUM; 
     62a:	3301      	adds	r3, #1
     62c:	7163      	strb	r3, [r4, #5]
	bl_get_ver_ack_encode(NULL,&ack,sizeof(ack));
     62e:	220a      	movs	r2, #10
     630:	0021      	movs	r1, r4
     632:	2000      	movs	r0, #0
     634:	4b03      	ldr	r3, [pc, #12]	; (644 <bootloader_handle_getver_cmd+0x28>)
     636:	4798      	blx	r3
	uart_send(&ack,sizeof(ack));
     638:	210a      	movs	r1, #10
     63a:	0020      	movs	r0, r4
     63c:	4b02      	ldr	r3, [pc, #8]	; (648 <bootloader_handle_getver_cmd+0x2c>)
     63e:	4798      	blx	r3
}
     640:	b006      	add	sp, #24
     642:	bd10      	pop	{r4, pc}
     644:	000001a9 	.word	0x000001a9
     648:	00000571 	.word	0x00000571

0000064c <bootloader_handle_getcid_cmd>:

void bootloader_handle_getcid_cmd(bl_get_id_t cmd){
     64c:	b500      	push	{lr}
     64e:	b087      	sub	sp, #28
	bl_get_id_ack_t ack;
	ack.chip_id = 0xffffffff;
     650:	230f      	movs	r3, #15
     652:	446b      	add	r3, sp
     654:	2201      	movs	r2, #1
     656:	4252      	negs	r2, r2
     658:	701a      	strb	r2, [r3, #0]
     65a:	705a      	strb	r2, [r3, #1]
     65c:	709a      	strb	r2, [r3, #2]
     65e:	70da      	strb	r2, [r3, #3]
	bl_get_id_ack_encode(NULL,&ack,sizeof(ack));
     660:	320c      	adds	r2, #12
     662:	a903      	add	r1, sp, #12
     664:	2000      	movs	r0, #0
     666:	4b04      	ldr	r3, [pc, #16]	; (678 <bootloader_handle_getcid_cmd+0x2c>)
     668:	4798      	blx	r3
	uart_send(&ack,sizeof(ack));
     66a:	210b      	movs	r1, #11
     66c:	a803      	add	r0, sp, #12
     66e:	4b03      	ldr	r3, [pc, #12]	; (67c <bootloader_handle_getcid_cmd+0x30>)
     670:	4798      	blx	r3
}
     672:	b007      	add	sp, #28
     674:	bd00      	pop	{pc}
     676:	46c0      	nop			; (mov r8, r8)
     678:	00000205 	.word	0x00000205
     67c:	00000571 	.word	0x00000571

00000680 <bootloader_handle_mem_read_cmd>:


void bootloader_handle_mem_read_cmd(bl_mem_read_t cmd){
     680:	b5f0      	push	{r4, r5, r6, r7, lr}
     682:	b0ab      	sub	sp, #172	; 0xac
     684:	0007      	movs	r7, r0
     686:	9002      	str	r0, [sp, #8]
     688:	4668      	mov	r0, sp
     68a:	71c1      	strb	r1, [r0, #7]
     68c:	0a0c      	lsrs	r4, r1, #8
     68e:	0c0d      	lsrs	r5, r1, #16
     690:	0008      	movs	r0, r1
     692:	9103      	str	r1, [sp, #12]
     694:	9204      	str	r2, [sp, #16]
     696:	9305      	str	r3, [sp, #20]
     698:	0e39      	lsrs	r1, r7, #24
     69a:	466b      	mov	r3, sp
     69c:	79df      	ldrb	r7, [r3, #7]
     69e:	023f      	lsls	r7, r7, #8
     6a0:	430f      	orrs	r7, r1
     6a2:	b2e1      	uxtb	r1, r4
     6a4:	0409      	lsls	r1, r1, #16
     6a6:	4339      	orrs	r1, r7
     6a8:	062d      	lsls	r5, r5, #24
     6aa:	4329      	orrs	r1, r5
	bl_mem_read_ack_t ack;
	int32_t ret;
	uint32_t start_addr = cmd.start_addr;
	uint32_t end_addr =  cmd.end_addr;
     6ac:	0e00      	lsrs	r0, r0, #24
     6ae:	0213      	lsls	r3, r2, #8
     6b0:	4303      	orrs	r3, r0
	
	uint32_t read_length =end_addr - start_addr;
     6b2:	1a5b      	subs	r3, r3, r1

	ret = flash_read(&BL_FLASH_IO,cmd.start_addr,flash_read_buf,read_length);
     6b4:	4a19      	ldr	r2, [pc, #100]	; (71c <bootloader_handle_mem_read_cmd+0x9c>)
     6b6:	481a      	ldr	r0, [pc, #104]	; (720 <bootloader_handle_mem_read_cmd+0xa0>)
     6b8:	4c1a      	ldr	r4, [pc, #104]	; (724 <bootloader_handle_mem_read_cmd+0xa4>)
     6ba:	47a0      	blx	r4
	switch (ret)
     6bc:	0003      	movs	r3, r0
     6be:	330e      	adds	r3, #14
     6c0:	d024      	beq.n	70c <bootloader_handle_mem_read_cmd+0x8c>
     6c2:	2800      	cmp	r0, #0
     6c4:	d026      	beq.n	714 <bootloader_handle_mem_read_cmd+0x94>
		
		case ERR_NONE:
			ack.valid = ERR_NONE;
		break;
	}
	memset(&ack.data[0],0,128);
     6c6:	2280      	movs	r2, #128	; 0x80
     6c8:	2100      	movs	r1, #0
     6ca:	2019      	movs	r0, #25
     6cc:	ab02      	add	r3, sp, #8
     6ce:	469c      	mov	ip, r3
     6d0:	4460      	add	r0, ip
     6d2:	4b15      	ldr	r3, [pc, #84]	; (728 <bootloader_handle_mem_read_cmd+0xa8>)
     6d4:	4798      	blx	r3
     6d6:	4b11      	ldr	r3, [pc, #68]	; (71c <bootloader_handle_mem_read_cmd+0x9c>)
     6d8:	2219      	movs	r2, #25
     6da:	a902      	add	r1, sp, #8
     6dc:	468c      	mov	ip, r1
     6de:	4462      	add	r2, ip
     6e0:	0018      	movs	r0, r3
     6e2:	3080      	adds	r0, #128	; 0x80
	for (uint8_t i=0;i<128;i++)
	{
		ack.data[i] = flash_read_buf[i];
     6e4:	7819      	ldrb	r1, [r3, #0]
     6e6:	7011      	strb	r1, [r2, #0]
     6e8:	3301      	adds	r3, #1
     6ea:	3201      	adds	r2, #1
	for (uint8_t i=0;i<128;i++)
     6ec:	4283      	cmp	r3, r0
     6ee:	d1f9      	bne.n	6e4 <bootloader_handle_mem_read_cmd+0x64>
	}
	ack.read_length = 128;
     6f0:	ac07      	add	r4, sp, #28
     6f2:	2380      	movs	r3, #128	; 0x80
     6f4:	7123      	strb	r3, [r4, #4]
	bl_mem_read_ack_encode(NULL,&ack,sizeof(ack));
     6f6:	2289      	movs	r2, #137	; 0x89
     6f8:	0021      	movs	r1, r4
     6fa:	2000      	movs	r0, #0
     6fc:	4b0b      	ldr	r3, [pc, #44]	; (72c <bootloader_handle_mem_read_cmd+0xac>)
     6fe:	4798      	blx	r3

	uart_send(&ack,sizeof(ack));
     700:	2189      	movs	r1, #137	; 0x89
     702:	0020      	movs	r0, r4
     704:	4b0a      	ldr	r3, [pc, #40]	; (730 <bootloader_handle_mem_read_cmd+0xb0>)
     706:	4798      	blx	r3
}
     708:	b02b      	add	sp, #172	; 0xac
     70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ack.valid = ERR_BAD_ADDRESS;
     70c:	22f2      	movs	r2, #242	; 0xf2
     70e:	ab07      	add	r3, sp, #28
     710:	70da      	strb	r2, [r3, #3]
		break;
     712:	e7d8      	b.n	6c6 <bootloader_handle_mem_read_cmd+0x46>
			ack.valid = ERR_NONE;
     714:	2200      	movs	r2, #0
     716:	ab07      	add	r3, sp, #28
     718:	70da      	strb	r2, [r3, #3]
		break;
     71a:	e7d4      	b.n	6c6 <bootloader_handle_mem_read_cmd+0x46>
     71c:	200000a0 	.word	0x200000a0
     720:	20000024 	.word	0x20000024
     724:	00000db5 	.word	0x00000db5
     728:	00001683 	.word	0x00001683
     72c:	000002c1 	.word	0x000002c1
     730:	00000571 	.word	0x00000571

00000734 <bootloader_handle_mem_write_cmd>:


void bootloader_handle_mem_write_cmd(bl_mem_write_t cmd)
{
     734:	b084      	sub	sp, #16
     736:	b530      	push	{r4, r5, lr}
     738:	b083      	sub	sp, #12
     73a:	0005      	movs	r5, r0
     73c:	9006      	str	r0, [sp, #24]
     73e:	0008      	movs	r0, r1
     740:	9107      	str	r1, [sp, #28]
     742:	9208      	str	r2, [sp, #32]
     744:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t ret;
	bl_mem_write_ack_t ack;
	uint32_t write_address = cmd.start_addr;
	uint32_t write_length = cmd.length ;
     746:	0e0b      	lsrs	r3, r1, #24
	uint32_t write_address = cmd.start_addr;
     748:	0e29      	lsrs	r1, r5, #24
     74a:	0204      	lsls	r4, r0, #8
     74c:	4321      	orrs	r1, r4
	uint32_t *write_data_ptr = &cmd.data;
	ret = flash_write(&BL_FLASH_IO, write_address,(uint8_t*)write_data_ptr, write_length);
     74e:	aa08      	add	r2, sp, #32
     750:	4814      	ldr	r0, [pc, #80]	; (7a4 <bootloader_handle_mem_write_cmd+0x70>)
     752:	4c15      	ldr	r4, [pc, #84]	; (7a8 <bootloader_handle_mem_write_cmd+0x74>)
     754:	47a0      	blx	r4
     756:	0004      	movs	r4, r0
	delay_ms(1);   //wait for cpu stall	
     758:	2001      	movs	r0, #1
     75a:	4b14      	ldr	r3, [pc, #80]	; (7ac <bootloader_handle_mem_write_cmd+0x78>)
     75c:	4798      	blx	r3
	switch (ret)
     75e:	0023      	movs	r3, r4
     760:	3311      	adds	r3, #17
     762:	d016      	beq.n	792 <bootloader_handle_mem_write_cmd+0x5e>
     764:	0023      	movs	r3, r4
     766:	330e      	adds	r3, #14
     768:	d00f      	beq.n	78a <bootloader_handle_mem_write_cmd+0x56>
     76a:	2c00      	cmp	r4, #0
     76c:	d015      	beq.n	79a <bootloader_handle_mem_write_cmd+0x66>
			break;
		case ERR_NONE:
			ack.valid = ERR_NONE;
			break;
	}
	bl_mem_write_ack_encode(NULL,&ack,sizeof(ack));
     76e:	2208      	movs	r2, #8
     770:	4669      	mov	r1, sp
     772:	2000      	movs	r0, #0
     774:	4b0e      	ldr	r3, [pc, #56]	; (7b0 <bootloader_handle_mem_write_cmd+0x7c>)
     776:	4798      	blx	r3

	uart_send(&ack,sizeof(ack));
     778:	2108      	movs	r1, #8
     77a:	4668      	mov	r0, sp
     77c:	4b0d      	ldr	r3, [pc, #52]	; (7b4 <bootloader_handle_mem_write_cmd+0x80>)
     77e:	4798      	blx	r3
}
     780:	b003      	add	sp, #12
     782:	bc30      	pop	{r4, r5}
     784:	bc08      	pop	{r3}
     786:	b004      	add	sp, #16
     788:	4718      	bx	r3
			ack.valid = ERR_BAD_ADDRESS;
     78a:	23f2      	movs	r3, #242	; 0xf2
     78c:	466a      	mov	r2, sp
     78e:	70d3      	strb	r3, [r2, #3]
			break;
     790:	e7ed      	b.n	76e <bootloader_handle_mem_write_cmd+0x3a>
			ack.valid = ERR_DENIED;
     792:	23ef      	movs	r3, #239	; 0xef
     794:	466a      	mov	r2, sp
     796:	70d3      	strb	r3, [r2, #3]
			break;
     798:	e7e9      	b.n	76e <bootloader_handle_mem_write_cmd+0x3a>
			ack.valid = ERR_NONE;
     79a:	2300      	movs	r3, #0
     79c:	466a      	mov	r2, sp
     79e:	70d3      	strb	r3, [r2, #3]
			break;
     7a0:	e7e5      	b.n	76e <bootloader_handle_mem_write_cmd+0x3a>
     7a2:	46c0      	nop			; (mov r8, r8)
     7a4:	20000024 	.word	0x20000024
     7a8:	00000e5d 	.word	0x00000e5d
     7ac:	00000d35 	.word	0x00000d35
     7b0:	00000265 	.word	0x00000265
     7b4:	00000571 	.word	0x00000571

000007b8 <bootloader_flash_erase_cmd>:

void bootloader_flash_erase_cmd(bl_mem_erase_t cmd){
     7b8:	b510      	push	{r4, lr}
     7ba:	b086      	sub	sp, #24
	uint32_t start = cmd.start_addr;
     7bc:	0e00      	lsrs	r0, r0, #24
     7be:	020b      	lsls	r3, r1, #8
     7c0:	4303      	orrs	r3, r0
	uint32_t end  = cmd.end_addr;
     7c2:	0e09      	lsrs	r1, r1, #24
     7c4:	0212      	lsls	r2, r2, #8
     7c6:	430a      	orrs	r2, r1
	uint32_t page_size;
	uint32_t erase_pages;
	bl_mem_erase_ack_t ack;
	if (start > end)
     7c8:	4293      	cmp	r3, r2
     7ca:	d901      	bls.n	7d0 <bootloader_flash_erase_cmd+0x18>
	ack.valid = BL_ACK;
	bl_mem_erase_ack_encode(NULL,&ack,sizeof(ack));
	uart_send(&ack,sizeof(ack));
	
	delay_ms(1);
}
     7cc:	b006      	add	sp, #24
     7ce:	bd10      	pop	{r4, pc}
	page_size = flash_get_page_size(&BL_FLASH_IO);
     7d0:	4809      	ldr	r0, [pc, #36]	; (7f8 <bootloader_flash_erase_cmd+0x40>)
     7d2:	4b0a      	ldr	r3, [pc, #40]	; (7fc <bootloader_flash_erase_cmd+0x44>)
     7d4:	4798      	blx	r3
	ack.valid = BL_ACK;
     7d6:	ac04      	add	r4, sp, #16
     7d8:	23a5      	movs	r3, #165	; 0xa5
     7da:	70e3      	strb	r3, [r4, #3]
	bl_mem_erase_ack_encode(NULL,&ack,sizeof(ack));
     7dc:	2208      	movs	r2, #8
     7de:	0021      	movs	r1, r4
     7e0:	2000      	movs	r0, #0
     7e2:	4b07      	ldr	r3, [pc, #28]	; (800 <bootloader_flash_erase_cmd+0x48>)
     7e4:	4798      	blx	r3
	uart_send(&ack,sizeof(ack));
     7e6:	2108      	movs	r1, #8
     7e8:	0020      	movs	r0, r4
     7ea:	4b06      	ldr	r3, [pc, #24]	; (804 <bootloader_flash_erase_cmd+0x4c>)
     7ec:	4798      	blx	r3
	delay_ms(1);
     7ee:	2001      	movs	r0, #1
     7f0:	4b05      	ldr	r3, [pc, #20]	; (808 <bootloader_flash_erase_cmd+0x50>)
     7f2:	4798      	blx	r3
     7f4:	e7ea      	b.n	7cc <bootloader_flash_erase_cmd+0x14>
     7f6:	46c0      	nop			; (mov r8, r8)
     7f8:	20000024 	.word	0x20000024
     7fc:	00000f1d 	.word	0x00000f1d
     800:	00000235 	.word	0x00000235
     804:	00000571 	.word	0x00000571
     808:	00000d35 	.word	0x00000d35

0000080c <bootloader_handle_reset_cmd>:


void bootloader_handle_reset_cmd(bl_reset_t cmd){
     80c:	b510      	push	{r4, lr}
     80e:	b084      	sub	sp, #16
	bl_reset_ack_t ack;
	ack.valid = 0x00;
     810:	ac02      	add	r4, sp, #8
     812:	2300      	movs	r3, #0
     814:	70e3      	strb	r3, [r4, #3]
	bl_reset_ack_encode(NULL,&ack,sizeof(ack));
     816:	2208      	movs	r2, #8
     818:	0021      	movs	r1, r4
     81a:	2000      	movs	r0, #0
     81c:	4b07      	ldr	r3, [pc, #28]	; (83c <bootloader_handle_reset_cmd+0x30>)
     81e:	4798      	blx	r3
	uart_send(&ack,sizeof(ack));
     820:	2108      	movs	r1, #8
     822:	0020      	movs	r0, r4
     824:	4b06      	ldr	r3, [pc, #24]	; (840 <bootloader_handle_reset_cmd+0x34>)
     826:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     828:	2280      	movs	r2, #128	; 0x80
     82a:	0152      	lsls	r2, r2, #5
     82c:	23c0      	movs	r3, #192	; 0xc0
     82e:	05db      	lsls	r3, r3, #23
     830:	619a      	str	r2, [r3, #24]
	gpio_set_pin_level(BUSY_PIN,true);
	SCB->AIRCR = (0x5FA<<SCB_AIRCR_VECTKEY_Pos)|SCB_AIRCR_SYSRESETREQ_Msk;
     832:	4a04      	ldr	r2, [pc, #16]	; (844 <bootloader_handle_reset_cmd+0x38>)
     834:	4b04      	ldr	r3, [pc, #16]	; (848 <bootloader_handle_reset_cmd+0x3c>)
     836:	60da      	str	r2, [r3, #12]
	// cortex M4 software reset
	//SCB_AIRCR = SCB_AIRCR_VECTKEY(0x5FA) | SCB_AIRCR_SYSRESETREQ_MASK;
}
     838:	b004      	add	sp, #16
     83a:	bd10      	pop	{r4, pc}
     83c:	000002f5 	.word	0x000002f5
     840:	00000571 	.word	0x00000571
     844:	05fa0004 	.word	0x05fa0004
     848:	e000ed00 	.word	0xe000ed00

0000084c <message_decode>:
uint8_t message_decode(uint8_t* buf,uint8_t msg_id){
     84c:	b5f0      	push	{r4, r5, r6, r7, lr}
     84e:	46ce      	mov	lr, r9
     850:	4647      	mov	r7, r8
     852:	b580      	push	{r7, lr}
     854:	b0a1      	sub	sp, #132	; 0x84
	switch (msg_id)
     856:	3903      	subs	r1, #3
     858:	b2cb      	uxtb	r3, r1
     85a:	2b0e      	cmp	r3, #14
     85c:	d81c      	bhi.n	898 <message_decode+0x4c>
     85e:	0099      	lsls	r1, r3, #2
     860:	4b8b      	ldr	r3, [pc, #556]	; (a90 <message_decode+0x244>)
     862:	585b      	ldr	r3, [r3, r1]
     864:	469f      	mov	pc, r3
			memcpy(&get_ver_cmd,buf,sizeof(get_ver_cmd));
     866:	4c8b      	ldr	r4, [pc, #556]	; (a94 <message_decode+0x248>)
     868:	2207      	movs	r2, #7
     86a:	0001      	movs	r1, r0
     86c:	0020      	movs	r0, r4
     86e:	4b8a      	ldr	r3, [pc, #552]	; (a98 <message_decode+0x24c>)
     870:	4798      	blx	r3
			bootloader_handle_getver_cmd(get_ver_cmd);
     872:	7820      	ldrb	r0, [r4, #0]
     874:	7863      	ldrb	r3, [r4, #1]
     876:	021b      	lsls	r3, r3, #8
     878:	4303      	orrs	r3, r0
     87a:	78a0      	ldrb	r0, [r4, #2]
     87c:	0400      	lsls	r0, r0, #16
     87e:	4303      	orrs	r3, r0
     880:	78e0      	ldrb	r0, [r4, #3]
     882:	0600      	lsls	r0, r0, #24
     884:	4318      	orrs	r0, r3
     886:	7923      	ldrb	r3, [r4, #4]
     888:	7961      	ldrb	r1, [r4, #5]
     88a:	0209      	lsls	r1, r1, #8
     88c:	430b      	orrs	r3, r1
     88e:	79a1      	ldrb	r1, [r4, #6]
     890:	0409      	lsls	r1, r1, #16
     892:	4319      	orrs	r1, r3
     894:	4b81      	ldr	r3, [pc, #516]	; (a9c <message_decode+0x250>)
     896:	4798      	blx	r3
}
     898:	b021      	add	sp, #132	; 0x84
     89a:	bc0c      	pop	{r2, r3}
     89c:	4690      	mov	r8, r2
     89e:	4699      	mov	r9, r3
     8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			memcpy(&get_id_cmd,buf,sizeof(get_id_cmd));
     8a2:	4c7f      	ldr	r4, [pc, #508]	; (aa0 <message_decode+0x254>)
     8a4:	2207      	movs	r2, #7
     8a6:	0001      	movs	r1, r0
     8a8:	0020      	movs	r0, r4
     8aa:	4b7b      	ldr	r3, [pc, #492]	; (a98 <message_decode+0x24c>)
     8ac:	4798      	blx	r3
			bootloader_handle_getcid_cmd(get_id_cmd);
     8ae:	7820      	ldrb	r0, [r4, #0]
     8b0:	7863      	ldrb	r3, [r4, #1]
     8b2:	021b      	lsls	r3, r3, #8
     8b4:	4303      	orrs	r3, r0
     8b6:	78a0      	ldrb	r0, [r4, #2]
     8b8:	0400      	lsls	r0, r0, #16
     8ba:	4303      	orrs	r3, r0
     8bc:	78e0      	ldrb	r0, [r4, #3]
     8be:	0600      	lsls	r0, r0, #24
     8c0:	4318      	orrs	r0, r3
     8c2:	7923      	ldrb	r3, [r4, #4]
     8c4:	7961      	ldrb	r1, [r4, #5]
     8c6:	0209      	lsls	r1, r1, #8
     8c8:	430b      	orrs	r3, r1
     8ca:	79a1      	ldrb	r1, [r4, #6]
     8cc:	0409      	lsls	r1, r1, #16
     8ce:	4319      	orrs	r1, r3
     8d0:	4b74      	ldr	r3, [pc, #464]	; (aa4 <message_decode+0x258>)
     8d2:	4798      	blx	r3
			break;
     8d4:	e7e0      	b.n	898 <message_decode+0x4c>
			memcpy(&jump_app_cmd,buf,sizeof(jump_app_cmd));
     8d6:	4c74      	ldr	r4, [pc, #464]	; (aa8 <message_decode+0x25c>)
     8d8:	220b      	movs	r2, #11
     8da:	0001      	movs	r1, r0
     8dc:	0020      	movs	r0, r4
     8de:	4b6e      	ldr	r3, [pc, #440]	; (a98 <message_decode+0x24c>)
     8e0:	4798      	blx	r3
			bootloader_handle_jump_to_address(jump_app_cmd);
     8e2:	7820      	ldrb	r0, [r4, #0]
     8e4:	7863      	ldrb	r3, [r4, #1]
     8e6:	021b      	lsls	r3, r3, #8
     8e8:	4303      	orrs	r3, r0
     8ea:	78a0      	ldrb	r0, [r4, #2]
     8ec:	0400      	lsls	r0, r0, #16
     8ee:	4303      	orrs	r3, r0
     8f0:	78e0      	ldrb	r0, [r4, #3]
     8f2:	0600      	lsls	r0, r0, #24
     8f4:	4318      	orrs	r0, r3
     8f6:	7921      	ldrb	r1, [r4, #4]
     8f8:	7963      	ldrb	r3, [r4, #5]
     8fa:	021b      	lsls	r3, r3, #8
     8fc:	430b      	orrs	r3, r1
     8fe:	79a1      	ldrb	r1, [r4, #6]
     900:	0409      	lsls	r1, r1, #16
     902:	430b      	orrs	r3, r1
     904:	79e1      	ldrb	r1, [r4, #7]
     906:	0609      	lsls	r1, r1, #24
     908:	4319      	orrs	r1, r3
     90a:	7a23      	ldrb	r3, [r4, #8]
     90c:	7a62      	ldrb	r2, [r4, #9]
     90e:	0212      	lsls	r2, r2, #8
     910:	4313      	orrs	r3, r2
     912:	7aa2      	ldrb	r2, [r4, #10]
     914:	0412      	lsls	r2, r2, #16
     916:	431a      	orrs	r2, r3
     918:	4b64      	ldr	r3, [pc, #400]	; (aac <message_decode+0x260>)
     91a:	4798      	blx	r3
			break;
     91c:	e7bc      	b.n	898 <message_decode+0x4c>
			memcpy(&mem_erase_cmd,buf,sizeof(mem_erase_cmd));			
     91e:	4c64      	ldr	r4, [pc, #400]	; (ab0 <message_decode+0x264>)
     920:	220f      	movs	r2, #15
     922:	0001      	movs	r1, r0
     924:	0020      	movs	r0, r4
     926:	4b5c      	ldr	r3, [pc, #368]	; (a98 <message_decode+0x24c>)
     928:	4798      	blx	r3
			bootloader_flash_erase_cmd(mem_erase_cmd);
     92a:	7820      	ldrb	r0, [r4, #0]
     92c:	7863      	ldrb	r3, [r4, #1]
     92e:	021b      	lsls	r3, r3, #8
     930:	4303      	orrs	r3, r0
     932:	78a0      	ldrb	r0, [r4, #2]
     934:	0400      	lsls	r0, r0, #16
     936:	4303      	orrs	r3, r0
     938:	78e0      	ldrb	r0, [r4, #3]
     93a:	0600      	lsls	r0, r0, #24
     93c:	4318      	orrs	r0, r3
     93e:	7921      	ldrb	r1, [r4, #4]
     940:	7963      	ldrb	r3, [r4, #5]
     942:	021b      	lsls	r3, r3, #8
     944:	430b      	orrs	r3, r1
     946:	79a1      	ldrb	r1, [r4, #6]
     948:	0409      	lsls	r1, r1, #16
     94a:	430b      	orrs	r3, r1
     94c:	79e1      	ldrb	r1, [r4, #7]
     94e:	0609      	lsls	r1, r1, #24
     950:	4319      	orrs	r1, r3
     952:	7a22      	ldrb	r2, [r4, #8]
     954:	7a63      	ldrb	r3, [r4, #9]
     956:	021b      	lsls	r3, r3, #8
     958:	4313      	orrs	r3, r2
     95a:	7aa2      	ldrb	r2, [r4, #10]
     95c:	0412      	lsls	r2, r2, #16
     95e:	4313      	orrs	r3, r2
     960:	7ae2      	ldrb	r2, [r4, #11]
     962:	0612      	lsls	r2, r2, #24
     964:	431a      	orrs	r2, r3
     966:	7b25      	ldrb	r5, [r4, #12]
     968:	7b63      	ldrb	r3, [r4, #13]
     96a:	021b      	lsls	r3, r3, #8
     96c:	431d      	orrs	r5, r3
     96e:	7ba3      	ldrb	r3, [r4, #14]
     970:	041b      	lsls	r3, r3, #16
     972:	432b      	orrs	r3, r5
     974:	4c4f      	ldr	r4, [pc, #316]	; (ab4 <message_decode+0x268>)
     976:	47a0      	blx	r4
			break;
     978:	e78e      	b.n	898 <message_decode+0x4c>
			memcpy(&mem_write_cmd,buf,sizeof(mem_write_cmd));
     97a:	4c4f      	ldr	r4, [pc, #316]	; (ab8 <message_decode+0x26c>)
     97c:	228c      	movs	r2, #140	; 0x8c
     97e:	0001      	movs	r1, r0
     980:	0020      	movs	r0, r4
     982:	4b45      	ldr	r3, [pc, #276]	; (a98 <message_decode+0x24c>)
     984:	4699      	mov	r9, r3
     986:	4798      	blx	r3
			bootloader_handle_mem_write_cmd(mem_write_cmd);
     988:	7822      	ldrb	r2, [r4, #0]
     98a:	7863      	ldrb	r3, [r4, #1]
     98c:	021b      	lsls	r3, r3, #8
     98e:	431a      	orrs	r2, r3
     990:	78a3      	ldrb	r3, [r4, #2]
     992:	041b      	lsls	r3, r3, #16
     994:	4313      	orrs	r3, r2
     996:	78e2      	ldrb	r2, [r4, #3]
     998:	0612      	lsls	r2, r2, #24
     99a:	431a      	orrs	r2, r3
     99c:	4690      	mov	r8, r2
     99e:	7927      	ldrb	r7, [r4, #4]
     9a0:	7963      	ldrb	r3, [r4, #5]
     9a2:	021b      	lsls	r3, r3, #8
     9a4:	433b      	orrs	r3, r7
     9a6:	79a7      	ldrb	r7, [r4, #6]
     9a8:	043f      	lsls	r7, r7, #16
     9aa:	433b      	orrs	r3, r7
     9ac:	79e7      	ldrb	r7, [r4, #7]
     9ae:	063f      	lsls	r7, r7, #24
     9b0:	431f      	orrs	r7, r3
     9b2:	7a26      	ldrb	r6, [r4, #8]
     9b4:	7a63      	ldrb	r3, [r4, #9]
     9b6:	021b      	lsls	r3, r3, #8
     9b8:	4333      	orrs	r3, r6
     9ba:	7aa6      	ldrb	r6, [r4, #10]
     9bc:	0436      	lsls	r6, r6, #16
     9be:	4333      	orrs	r3, r6
     9c0:	7ae6      	ldrb	r6, [r4, #11]
     9c2:	0636      	lsls	r6, r6, #24
     9c4:	431e      	orrs	r6, r3
     9c6:	7b25      	ldrb	r5, [r4, #12]
     9c8:	7b63      	ldrb	r3, [r4, #13]
     9ca:	021b      	lsls	r3, r3, #8
     9cc:	432b      	orrs	r3, r5
     9ce:	7ba5      	ldrb	r5, [r4, #14]
     9d0:	042d      	lsls	r5, r5, #16
     9d2:	432b      	orrs	r3, r5
     9d4:	7be5      	ldrb	r5, [r4, #15]
     9d6:	062d      	lsls	r5, r5, #24
     9d8:	431d      	orrs	r5, r3
     9da:	0021      	movs	r1, r4
     9dc:	3110      	adds	r1, #16
     9de:	227c      	movs	r2, #124	; 0x7c
     9e0:	4668      	mov	r0, sp
     9e2:	47c8      	blx	r9
     9e4:	4640      	mov	r0, r8
     9e6:	0039      	movs	r1, r7
     9e8:	0032      	movs	r2, r6
     9ea:	002b      	movs	r3, r5
     9ec:	4c33      	ldr	r4, [pc, #204]	; (abc <message_decode+0x270>)
     9ee:	47a0      	blx	r4
			break;
     9f0:	e752      	b.n	898 <message_decode+0x4c>
			memcpy(&mem_read_cmd,buf,sizeof(mem_read_cmd));
     9f2:	4c33      	ldr	r4, [pc, #204]	; (ac0 <message_decode+0x274>)
     9f4:	220f      	movs	r2, #15
     9f6:	0001      	movs	r1, r0
     9f8:	0020      	movs	r0, r4
     9fa:	4b27      	ldr	r3, [pc, #156]	; (a98 <message_decode+0x24c>)
     9fc:	4798      	blx	r3
			bootloader_handle_mem_read_cmd(mem_read_cmd);
     9fe:	7820      	ldrb	r0, [r4, #0]
     a00:	7863      	ldrb	r3, [r4, #1]
     a02:	021b      	lsls	r3, r3, #8
     a04:	4303      	orrs	r3, r0
     a06:	78a0      	ldrb	r0, [r4, #2]
     a08:	0400      	lsls	r0, r0, #16
     a0a:	4303      	orrs	r3, r0
     a0c:	78e0      	ldrb	r0, [r4, #3]
     a0e:	0600      	lsls	r0, r0, #24
     a10:	4318      	orrs	r0, r3
     a12:	7921      	ldrb	r1, [r4, #4]
     a14:	7963      	ldrb	r3, [r4, #5]
     a16:	021b      	lsls	r3, r3, #8
     a18:	430b      	orrs	r3, r1
     a1a:	79a1      	ldrb	r1, [r4, #6]
     a1c:	0409      	lsls	r1, r1, #16
     a1e:	430b      	orrs	r3, r1
     a20:	79e1      	ldrb	r1, [r4, #7]
     a22:	0609      	lsls	r1, r1, #24
     a24:	4319      	orrs	r1, r3
     a26:	7a22      	ldrb	r2, [r4, #8]
     a28:	7a63      	ldrb	r3, [r4, #9]
     a2a:	021b      	lsls	r3, r3, #8
     a2c:	4313      	orrs	r3, r2
     a2e:	7aa2      	ldrb	r2, [r4, #10]
     a30:	0412      	lsls	r2, r2, #16
     a32:	4313      	orrs	r3, r2
     a34:	7ae2      	ldrb	r2, [r4, #11]
     a36:	0612      	lsls	r2, r2, #24
     a38:	431a      	orrs	r2, r3
     a3a:	7b25      	ldrb	r5, [r4, #12]
     a3c:	7b63      	ldrb	r3, [r4, #13]
     a3e:	021b      	lsls	r3, r3, #8
     a40:	431d      	orrs	r5, r3
     a42:	7ba3      	ldrb	r3, [r4, #14]
     a44:	041b      	lsls	r3, r3, #16
     a46:	432b      	orrs	r3, r5
     a48:	4c1e      	ldr	r4, [pc, #120]	; (ac4 <message_decode+0x278>)
     a4a:	47a0      	blx	r4
			break;
     a4c:	e724      	b.n	898 <message_decode+0x4c>
			memcpy(&reset_cmd,buf,sizeof(reset_cmd));
     a4e:	4c1e      	ldr	r4, [pc, #120]	; (ac8 <message_decode+0x27c>)
     a50:	2207      	movs	r2, #7
     a52:	0001      	movs	r1, r0
     a54:	0020      	movs	r0, r4
     a56:	4b10      	ldr	r3, [pc, #64]	; (a98 <message_decode+0x24c>)
     a58:	4798      	blx	r3
			bootloader_handle_reset_cmd(reset_cmd);
     a5a:	7820      	ldrb	r0, [r4, #0]
     a5c:	7863      	ldrb	r3, [r4, #1]
     a5e:	021b      	lsls	r3, r3, #8
     a60:	4303      	orrs	r3, r0
     a62:	78a0      	ldrb	r0, [r4, #2]
     a64:	0400      	lsls	r0, r0, #16
     a66:	4303      	orrs	r3, r0
     a68:	78e0      	ldrb	r0, [r4, #3]
     a6a:	0600      	lsls	r0, r0, #24
     a6c:	4318      	orrs	r0, r3
     a6e:	7923      	ldrb	r3, [r4, #4]
     a70:	7961      	ldrb	r1, [r4, #5]
     a72:	0209      	lsls	r1, r1, #8
     a74:	430b      	orrs	r3, r1
     a76:	79a1      	ldrb	r1, [r4, #6]
     a78:	0409      	lsls	r1, r1, #16
     a7a:	4319      	orrs	r1, r3
     a7c:	4b13      	ldr	r3, [pc, #76]	; (acc <message_decode+0x280>)
     a7e:	4798      	blx	r3
			break;
     a80:	e70a      	b.n	898 <message_decode+0x4c>
			memcpy(&verify_cmd,buf,sizeof(verify_cmd));
     a82:	2213      	movs	r2, #19
     a84:	0001      	movs	r1, r0
     a86:	4812      	ldr	r0, [pc, #72]	; (ad0 <message_decode+0x284>)
     a88:	4b03      	ldr	r3, [pc, #12]	; (a98 <message_decode+0x24c>)
     a8a:	4798      	blx	r3
			break;
     a8c:	e704      	b.n	898 <message_decode+0x4c>
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	00001694 	.word	0x00001694
     a94:	20000054 	.word	0x20000054
     a98:	00001671 	.word	0x00001671
     a9c:	0000061d 	.word	0x0000061d
     aa0:	20000070 	.word	0x20000070
     aa4:	0000064d 	.word	0x0000064d
     aa8:	2000007c 	.word	0x2000007c
     aac:	000005c5 	.word	0x000005c5
     ab0:	200002c4 	.word	0x200002c4
     ab4:	000007b9 	.word	0x000007b9
     ab8:	20000170 	.word	0x20000170
     abc:	00000735 	.word	0x00000735
     ac0:	20000088 	.word	0x20000088
     ac4:	00000681 	.word	0x00000681
     ac8:	20000098 	.word	0x20000098
     acc:	0000080d 	.word	0x0000080d
     ad0:	2000005c 	.word	0x2000005c

00000ad4 <packet_parser>:

void bootloader_handle_verify_cmd(bl_verify_t cmd){
	
}

uint8_t packet_parser(uint8_t* buf,uint8_t data,parse_state_t* ps){
     ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ad6:	b087      	sub	sp, #28
     ad8:	0005      	movs	r5, r0
     ada:	0014      	movs	r4, r2
	uint32_t crc_val;
	uint8_t ret;
	uint8_t i=0;
	//uint8_t start_idx;
	
	buf[ps->rx_index] = data;
     adc:	7853      	ldrb	r3, [r2, #1]
     ade:	54c1      	strb	r1, [r0, r3]
	
	switch (ps->state)
     ae0:	7893      	ldrb	r3, [r2, #2]
     ae2:	2b01      	cmp	r3, #1
     ae4:	d020      	beq.n	b28 <packet_parser+0x54>
     ae6:	2b00      	cmp	r3, #0
     ae8:	d007      	beq.n	afa <packet_parser+0x26>
     aea:	2b02      	cmp	r3, #2
     aec:	d025      	beq.n	b3a <packet_parser+0x66>
			
			}
		}
		break;
	}
	ps->rx_index++;
     aee:	7863      	ldrb	r3, [r4, #1]
     af0:	3301      	adds	r3, #1
     af2:	7063      	strb	r3, [r4, #1]
	return 0;
     af4:	2000      	movs	r0, #0
}
     af6:	b007      	add	sp, #28
     af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(buf[i] == 0x55){
     afa:	7803      	ldrb	r3, [r0, #0]
     afc:	2b55      	cmp	r3, #85	; 0x55
     afe:	d00a      	beq.n	b16 <packet_parser+0x42>
     b00:	1c42      	adds	r2, r0, #1
		for (i=0;i<PACK_LEN;i++)
     b02:	2301      	movs	r3, #1
			if(buf[i] == 0x55){
     b04:	7811      	ldrb	r1, [r2, #0]
     b06:	2955      	cmp	r1, #85	; 0x55
     b08:	d006      	beq.n	b18 <packet_parser+0x44>
		for (i=0;i<PACK_LEN;i++)
     b0a:	3301      	adds	r3, #1
     b0c:	b2db      	uxtb	r3, r3
     b0e:	3201      	adds	r2, #1
     b10:	2bc8      	cmp	r3, #200	; 0xc8
     b12:	d1f7      	bne.n	b04 <packet_parser+0x30>
     b14:	e001      	b.n	b1a <packet_parser+0x46>
			if(buf[i] == 0x55){
     b16:	2300      	movs	r3, #0
				ps->start_idx = i;
     b18:	7123      	strb	r3, [r4, #4]
		if(buf[ps->start_idx] == 0x55)
     b1a:	7923      	ldrb	r3, [r4, #4]
     b1c:	5ceb      	ldrb	r3, [r5, r3]
     b1e:	2b55      	cmp	r3, #85	; 0x55
     b20:	d1e5      	bne.n	aee <packet_parser+0x1a>
			ps->state = PARSE_STATE_LEN;
     b22:	3b54      	subs	r3, #84	; 0x54
     b24:	70a3      	strb	r3, [r4, #2]
     b26:	e7e2      	b.n	aee <packet_parser+0x1a>
		if(buf[ps->start_idx+1]<PACK_LEN)   //packet should be smaller than 255 bytes
     b28:	7913      	ldrb	r3, [r2, #4]
     b2a:	18c5      	adds	r5, r0, r3
     b2c:	786b      	ldrb	r3, [r5, #1]
     b2e:	2bc7      	cmp	r3, #199	; 0xc7
     b30:	d8dd      	bhi.n	aee <packet_parser+0x1a>
			ps->data_len = buf[ps->start_idx+1];
     b32:	70d3      	strb	r3, [r2, #3]
			ps->state = PARSE_STATE_DATA;
     b34:	2302      	movs	r3, #2
     b36:	7093      	strb	r3, [r2, #2]
     b38:	e7d9      	b.n	aee <packet_parser+0x1a>
		ps->now_idx++;
     b3a:	7811      	ldrb	r1, [r2, #0]
     b3c:	1c4b      	adds	r3, r1, #1
     b3e:	b2db      	uxtb	r3, r3
     b40:	7013      	strb	r3, [r2, #0]
		if(ps->now_idx == ps->data_len)
     b42:	78d2      	ldrb	r2, [r2, #3]
     b44:	429a      	cmp	r2, r3
     b46:	d1d2      	bne.n	aee <packet_parser+0x1a>
			ps->state = PARSE_STATE_CHECK;
     b48:	2203      	movs	r2, #3
     b4a:	70a2      	strb	r2, [r4, #2]
			uint8_t ind = ps->start_idx + (ps->data_len+2) - PACK_CRC_LEN;
     b4c:	7920      	ldrb	r0, [r4, #4]
     b4e:	1e82      	subs	r2, r0, #2
     b50:	189b      	adds	r3, r3, r2
			crc_val =(uint32_t)(buf[ind+0]<<0)  +
     b52:	b2db      	uxtb	r3, r3
			(uint32_t)(buf[ ind+1]<<8)  +
     b54:	18ea      	adds	r2, r5, r3
     b56:	7856      	ldrb	r6, [r2, #1]
     b58:	0236      	lsls	r6, r6, #8
			(uint32_t)(buf[ ind+2]<<16) +
     b5a:	7897      	ldrb	r7, [r2, #2]
     b5c:	043f      	lsls	r7, r7, #16
			(uint32_t)(buf[ ind+1]<<8)  +
     b5e:	19f6      	adds	r6, r6, r7
			crc_val =(uint32_t)(buf[ind+0]<<0)  +
     b60:	5ceb      	ldrb	r3, [r5, r3]
			(uint32_t)(buf[ ind+1]<<8)  +
     b62:	18f6      	adds	r6, r6, r3
			(uint32_t)(buf[ ind+3]<<24);
     b64:	78d3      	ldrb	r3, [r2, #3]
     b66:	061b      	lsls	r3, r3, #24
			crc_val =(uint32_t)(buf[ind+0]<<0)  +
     b68:	18f6      	adds	r6, r6, r3
			uint8_t len = (ps->data_len+2)- PACK_CRC_LEN;
     b6a:	3901      	subs	r1, #1
			if(sum32(&buf[ps->start_idx],len) == crc_val){
     b6c:	b2c9      	uxtb	r1, r1
     b6e:	1828      	adds	r0, r5, r0
     b70:	4b0d      	ldr	r3, [pc, #52]	; (ba8 <packet_parser+0xd4>)
     b72:	4798      	blx	r3
     b74:	4286      	cmp	r6, r0
     b76:	d00e      	beq.n	b96 <packet_parser+0xc2>
				ps->rx_index = 0;
     b78:	2300      	movs	r3, #0
     b7a:	7063      	strb	r3, [r4, #1]
				ps->now_idx = 0;
     b7c:	7023      	strb	r3, [r4, #0]
				ps->data_len = 0;
     b7e:	70e3      	strb	r3, [r4, #3]
				ps->state = PARSE_STATE_START;
     b80:	70a3      	strb	r3, [r4, #2]
				err_encode(err_buf,&err,sizeof(err));
     b82:	2207      	movs	r2, #7
     b84:	a904      	add	r1, sp, #16
     b86:	a801      	add	r0, sp, #4
     b88:	4b08      	ldr	r3, [pc, #32]	; (bac <packet_parser+0xd8>)
     b8a:	4798      	blx	r3
				uart_send(&err,sizeof(err));
     b8c:	2107      	movs	r1, #7
     b8e:	a804      	add	r0, sp, #16
     b90:	4b07      	ldr	r3, [pc, #28]	; (bb0 <packet_parser+0xdc>)
     b92:	4798      	blx	r3
     b94:	e7ab      	b.n	aee <packet_parser+0x1a>
				ps->start_idx = 0;
     b96:	2300      	movs	r3, #0
     b98:	7123      	strb	r3, [r4, #4]
				ps->rx_index = 0;
     b9a:	7063      	strb	r3, [r4, #1]
				ps->now_idx = 0;
     b9c:	7023      	strb	r3, [r4, #0]
				ps->data_len = 0;
     b9e:	70e3      	strb	r3, [r4, #3]
				ps->state = PARSE_STATE_START;
     ba0:	70a3      	strb	r3, [r4, #2]
				return buf[ps->start_idx+2];
     ba2:	78a8      	ldrb	r0, [r5, #2]
     ba4:	e7a7      	b.n	af6 <packet_parser+0x22>
     ba6:	46c0      	nop			; (mov r8, r8)
     ba8:	00000129 	.word	0x00000129
     bac:	00000149 	.word	0x00000149
     bb0:	00000571 	.word	0x00000571

00000bb4 <main>:
{
     bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
     bb6:	46ce      	mov	lr, r9
     bb8:	b500      	push	{lr}
     bba:	b082      	sub	sp, #8
	atmel_start_init();
     bbc:	4b3f      	ldr	r3, [pc, #252]	; (cbc <main+0x108>)
     bbe:	4798      	blx	r3
	usart_sync_enable(&EDBG_COM);
     bc0:	483f      	ldr	r0, [pc, #252]	; (cc0 <main+0x10c>)
     bc2:	4b40      	ldr	r3, [pc, #256]	; (cc4 <main+0x110>)
     bc4:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     bc6:	2000      	movs	r0, #0
     bc8:	4e3f      	ldr	r6, [pc, #252]	; (cc8 <main+0x114>)
     bca:	47b0      	blx	r6
	pin_mode = gpio_get_pin_level(BOOT_PIN); //ensure pin mode
     bcc:	4d3f      	ldr	r5, [pc, #252]	; (ccc <main+0x118>)
     bce:	0b43      	lsrs	r3, r0, #13
     bd0:	2401      	movs	r4, #1
     bd2:	4023      	ands	r3, r4
     bd4:	702b      	strb	r3, [r5, #0]
     bd6:	2000      	movs	r0, #0
     bd8:	47b0      	blx	r6
     bda:	0b43      	lsrs	r3, r0, #13
     bdc:	4023      	ands	r3, r4
	pin_mode = gpio_get_pin_level(BOOT_PIN);
     bde:	702b      	strb	r3, [r5, #0]
	bl_get_ver_encode(NULL,&get_ver_cmd,sizeof(get_ver_cmd));
     be0:	2207      	movs	r2, #7
     be2:	493b      	ldr	r1, [pc, #236]	; (cd0 <main+0x11c>)
     be4:	2000      	movs	r0, #0
     be6:	4b3b      	ldr	r3, [pc, #236]	; (cd4 <main+0x120>)
     be8:	4798      	blx	r3
	bl_get_id_encode(NULL,&get_id_cmd,sizeof(get_id_cmd));
     bea:	2207      	movs	r2, #7
     bec:	493a      	ldr	r1, [pc, #232]	; (cd8 <main+0x124>)
     bee:	2000      	movs	r0, #0
     bf0:	4b3a      	ldr	r3, [pc, #232]	; (cdc <main+0x128>)
     bf2:	4798      	blx	r3
	mem_read_cmd.start_addr = 0x4000;
     bf4:	493a      	ldr	r1, [pc, #232]	; (ce0 <main+0x12c>)
     bf6:	2200      	movs	r2, #0
     bf8:	70ca      	strb	r2, [r1, #3]
     bfa:	3240      	adds	r2, #64	; 0x40
     bfc:	710a      	strb	r2, [r1, #4]
     bfe:	2200      	movs	r2, #0
     c00:	714a      	strb	r2, [r1, #5]
     c02:	718a      	strb	r2, [r1, #6]
	mem_read_cmd.end_addr = 0x4080;
     c04:	3a80      	subs	r2, #128	; 0x80
     c06:	71ca      	strb	r2, [r1, #7]
     c08:	2240      	movs	r2, #64	; 0x40
     c0a:	720a      	strb	r2, [r1, #8]
     c0c:	2200      	movs	r2, #0
     c0e:	724a      	strb	r2, [r1, #9]
     c10:	728a      	strb	r2, [r1, #10]
	bl_mem_read_encode(NULL,&mem_read_cmd,sizeof(mem_read_cmd));
     c12:	320f      	adds	r2, #15
     c14:	2000      	movs	r0, #0
     c16:	4b33      	ldr	r3, [pc, #204]	; (ce4 <main+0x130>)
     c18:	4798      	blx	r3
     c1a:	2000      	movs	r0, #0
     c1c:	47b0      	blx	r6
     c1e:	0b43      	lsrs	r3, r0, #13
     c20:	4023      	ands	r3, r4
	pin_mode = gpio_get_pin_level(BOOT_PIN); //ensure pin mode
     c22:	702b      	strb	r3, [r5, #0]
     c24:	2000      	movs	r0, #0
     c26:	47b0      	blx	r6
     c28:	0b40      	lsrs	r0, r0, #13
     c2a:	4004      	ands	r4, r0
	pin_mode = gpio_get_pin_level(BOOT_PIN);
     c2c:	702c      	strb	r4, [r5, #0]
	memset(pdata,0,200);
     c2e:	22c8      	movs	r2, #200	; 0xc8
     c30:	2100      	movs	r1, #0
     c32:	482d      	ldr	r0, [pc, #180]	; (ce8 <main+0x134>)
     c34:	4b2d      	ldr	r3, [pc, #180]	; (cec <main+0x138>)
     c36:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
     c38:	4f2d      	ldr	r7, [pc, #180]	; (cf0 <main+0x13c>)
	CRITICAL_SECTION_LEAVE();
     c3a:	4e2e      	ldr	r6, [pc, #184]	; (cf4 <main+0x140>)
		pin_mode = gpio_get_pin_level(BOOT_PIN);
     c3c:	4d23      	ldr	r5, [pc, #140]	; (ccc <main+0x118>)
     c3e:	e001      	b.n	c44 <main+0x90>
			jump_to_application();
     c40:	4b2d      	ldr	r3, [pc, #180]	; (cf8 <main+0x144>)
     c42:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
     c44:	a801      	add	r0, sp, #4
     c46:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     c48:	21c0      	movs	r1, #192	; 0xc0
     c4a:	05c9      	lsls	r1, r1, #23
     c4c:	680b      	ldr	r3, [r1, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     c4e:	2282      	movs	r2, #130	; 0x82
     c50:	05d2      	lsls	r2, r2, #23
     c52:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     c54:	690c      	ldr	r4, [r1, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     c56:	4054      	eors	r4, r2
     c58:	401c      	ands	r4, r3
     c5a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
     c5c:	a801      	add	r0, sp, #4
     c5e:	47b0      	blx	r6
     c60:	2380      	movs	r3, #128	; 0x80
     c62:	019b      	lsls	r3, r3, #6
     c64:	4023      	ands	r3, r4
     c66:	001a      	movs	r2, r3
     c68:	1e51      	subs	r1, r2, #1
     c6a:	418a      	sbcs	r2, r1
     c6c:	702a      	strb	r2, [r5, #0]
		if(IS_BOOT_MODE){
     c6e:	2b00      	cmp	r3, #0
     c70:	d1e6      	bne.n	c40 <main+0x8c>
			uart_recv(&buf,1);
     c72:	4c22      	ldr	r4, [pc, #136]	; (cfc <main+0x148>)
     c74:	2101      	movs	r1, #1
     c76:	0020      	movs	r0, r4
     c78:	4b21      	ldr	r3, [pc, #132]	; (d00 <main+0x14c>)
     c7a:	4798      	blx	r3
			msg_id = packet_parser(pdata,buf,&ps);
     c7c:	7821      	ldrb	r1, [r4, #0]
     c7e:	4a21      	ldr	r2, [pc, #132]	; (d04 <main+0x150>)
     c80:	4819      	ldr	r0, [pc, #100]	; (ce8 <main+0x134>)
     c82:	4b21      	ldr	r3, [pc, #132]	; (d08 <main+0x154>)
     c84:	4798      	blx	r3
     c86:	4b21      	ldr	r3, [pc, #132]	; (d0c <main+0x158>)
     c88:	7018      	strb	r0, [r3, #0]
			if (msg_id)
     c8a:	2800      	cmp	r0, #0
     c8c:	d0da      	beq.n	c44 <main+0x90>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c8e:	24c0      	movs	r4, #192	; 0xc0
     c90:	05e4      	lsls	r4, r4, #23
     c92:	2380      	movs	r3, #128	; 0x80
     c94:	015b      	lsls	r3, r3, #5
     c96:	4699      	mov	r9, r3
     c98:	6163      	str	r3, [r4, #20]
				message_decode(pdata,msg_id);
     c9a:	0001      	movs	r1, r0
     c9c:	4812      	ldr	r0, [pc, #72]	; (ce8 <main+0x134>)
     c9e:	4b1c      	ldr	r3, [pc, #112]	; (d10 <main+0x15c>)
     ca0:	4798      	blx	r3
				memset(pdata,0,200);
     ca2:	22c8      	movs	r2, #200	; 0xc8
     ca4:	2100      	movs	r1, #0
     ca6:	4810      	ldr	r0, [pc, #64]	; (ce8 <main+0x134>)
     ca8:	4b10      	ldr	r3, [pc, #64]	; (cec <main+0x138>)
     caa:	4798      	blx	r3
				sp+=1;
     cac:	4a19      	ldr	r2, [pc, #100]	; (d14 <main+0x160>)
     cae:	6813      	ldr	r3, [r2, #0]
     cb0:	3301      	adds	r3, #1
     cb2:	6013      	str	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cb4:	464b      	mov	r3, r9
     cb6:	61a3      	str	r3, [r4, #24]
     cb8:	e7c4      	b.n	c44 <main+0x90>
     cba:	46c0      	nop			; (mov r8, r8)
     cbc:	0000011d 	.word	0x0000011d
     cc0:	20000040 	.word	0x20000040
     cc4:	000010dd 	.word	0x000010dd
     cc8:	000004f9 	.word	0x000004f9
     ccc:	2000039c 	.word	0x2000039c
     cd0:	20000054 	.word	0x20000054
     cd4:	00000179 	.word	0x00000179
     cd8:	20000070 	.word	0x20000070
     cdc:	000001d9 	.word	0x000001d9
     ce0:	20000088 	.word	0x20000088
     ce4:	00000295 	.word	0x00000295
     ce8:	200001fc 	.word	0x200001fc
     cec:	00001683 	.word	0x00001683
     cf0:	00000d19 	.word	0x00000d19
     cf4:	00000d27 	.word	0x00000d27
     cf8:	000005a9 	.word	0x000005a9
     cfc:	2000016c 	.word	0x2000016c
     d00:	00000539 	.word	0x00000539
     d04:	2000004c 	.word	0x2000004c
     d08:	00000ad5 	.word	0x00000ad5
     d0c:	20000077 	.word	0x20000077
     d10:	0000084d 	.word	0x0000084d
     d14:	20000168 	.word	0x20000168

00000d18 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d18:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     d1c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     d1e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     d20:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     d24:	4770      	bx	lr

00000d26 <atomic_leave_critical>:
     d26:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     d2a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d2c:	f383 8810 	msr	PRIMASK, r3
}
     d30:	4770      	bx	lr
	...

00000d34 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     d34:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     d36:	4b04      	ldr	r3, [pc, #16]	; (d48 <delay_ms+0x14>)
     d38:	681c      	ldr	r4, [r3, #0]
     d3a:	4b04      	ldr	r3, [pc, #16]	; (d4c <delay_ms+0x18>)
     d3c:	4798      	blx	r3
     d3e:	0001      	movs	r1, r0
     d40:	0020      	movs	r0, r4
     d42:	4b03      	ldr	r3, [pc, #12]	; (d50 <delay_ms+0x1c>)
     d44:	4798      	blx	r3
}
     d46:	bd10      	pop	{r4, pc}
     d48:	2000001c 	.word	0x2000001c
     d4c:	0000113d 	.word	0x0000113d
     d50:	00001159 	.word	0x00001159

00000d54 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     d54:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     d56:	6943      	ldr	r3, [r0, #20]
     d58:	2b00      	cmp	r3, #0
     d5a:	d000      	beq.n	d5e <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
     d5c:	4798      	blx	r3
	}
}
     d5e:	bd10      	pop	{r4, pc}

00000d60 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     d60:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     d62:	6983      	ldr	r3, [r0, #24]
     d64:	2b00      	cmp	r3, #0
     d66:	d000      	beq.n	d6a <flash_error+0xa>
		descr->callbacks.cb_error(descr);
     d68:	4798      	blx	r3
	}
}
     d6a:	bd10      	pop	{r4, pc}

00000d6c <flash_init>:
{
     d6c:	b570      	push	{r4, r5, r6, lr}
     d6e:	0005      	movs	r5, r0
     d70:	000c      	movs	r4, r1
	ASSERT(flash && hw);
     d72:	2800      	cmp	r0, #0
     d74:	d012      	beq.n	d9c <flash_init+0x30>
     d76:	0008      	movs	r0, r1
     d78:	1e43      	subs	r3, r0, #1
     d7a:	4198      	sbcs	r0, r3
     d7c:	b2c0      	uxtb	r0, r0
     d7e:	2238      	movs	r2, #56	; 0x38
     d80:	4907      	ldr	r1, [pc, #28]	; (da0 <flash_init+0x34>)
     d82:	4b08      	ldr	r3, [pc, #32]	; (da4 <flash_init+0x38>)
     d84:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     d86:	0021      	movs	r1, r4
     d88:	0028      	movs	r0, r5
     d8a:	4b07      	ldr	r3, [pc, #28]	; (da8 <flash_init+0x3c>)
     d8c:	4798      	blx	r3
	if (rc) {
     d8e:	2800      	cmp	r0, #0
     d90:	d103      	bne.n	d9a <flash_init+0x2e>
	flash->dev.flash_cb.ready_cb = flash_ready;
     d92:	4b06      	ldr	r3, [pc, #24]	; (dac <flash_init+0x40>)
     d94:	602b      	str	r3, [r5, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     d96:	4b06      	ldr	r3, [pc, #24]	; (db0 <flash_init+0x44>)
     d98:	606b      	str	r3, [r5, #4]
}
     d9a:	bd70      	pop	{r4, r5, r6, pc}
     d9c:	2000      	movs	r0, #0
     d9e:	e7ee      	b.n	d7e <flash_init+0x12>
     da0:	000016d0 	.word	0x000016d0
     da4:	00001135 	.word	0x00001135
     da8:	000012a1 	.word	0x000012a1
     dac:	00000d55 	.word	0x00000d55
     db0:	00000d61 	.word	0x00000d61

00000db4 <flash_read>:
{
     db4:	b5f0      	push	{r4, r5, r6, r7, lr}
     db6:	46ce      	mov	lr, r9
     db8:	b500      	push	{lr}
     dba:	b082      	sub	sp, #8
     dbc:	0004      	movs	r4, r0
     dbe:	000f      	movs	r7, r1
     dc0:	0016      	movs	r6, r2
     dc2:	001d      	movs	r5, r3
	ASSERT(flash && buffer && length);
     dc4:	2800      	cmp	r0, #0
     dc6:	d018      	beq.n	dfa <flash_read+0x46>
     dc8:	2a00      	cmp	r2, #0
     dca:	d035      	beq.n	e38 <flash_read+0x84>
     dcc:	2001      	movs	r0, #1
     dce:	2b00      	cmp	r3, #0
     dd0:	d114      	bne.n	dfc <flash_read+0x48>
     dd2:	2256      	movs	r2, #86	; 0x56
     dd4:	491c      	ldr	r1, [pc, #112]	; (e48 <flash_read+0x94>)
     dd6:	2000      	movs	r0, #0
     dd8:	4b1c      	ldr	r3, [pc, #112]	; (e4c <flash_read+0x98>)
     dda:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
     ddc:	9401      	str	r4, [sp, #4]
     dde:	0020      	movs	r0, r4
     de0:	4b1b      	ldr	r3, [pc, #108]	; (e50 <flash_read+0x9c>)
     de2:	4798      	blx	r3
     de4:	4681      	mov	r9, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
     de6:	0020      	movs	r0, r4
     de8:	4b1a      	ldr	r3, [pc, #104]	; (e54 <flash_read+0xa0>)
     dea:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
     dec:	464b      	mov	r3, r9
     dee:	4358      	muls	r0, r3
     df0:	4287      	cmp	r7, r0
     df2:	d916      	bls.n	e22 <flash_read+0x6e>
		return ERR_BAD_ADDRESS;
     df4:	200e      	movs	r0, #14
     df6:	4240      	negs	r0, r0
     df8:	e01a      	b.n	e30 <flash_read+0x7c>
	ASSERT(flash && buffer && length);
     dfa:	2000      	movs	r0, #0
     dfc:	2256      	movs	r2, #86	; 0x56
     dfe:	4912      	ldr	r1, [pc, #72]	; (e48 <flash_read+0x94>)
     e00:	4b12      	ldr	r3, [pc, #72]	; (e4c <flash_read+0x98>)
     e02:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
     e04:	9401      	str	r4, [sp, #4]
     e06:	0020      	movs	r0, r4
     e08:	4b11      	ldr	r3, [pc, #68]	; (e50 <flash_read+0x9c>)
     e0a:	4798      	blx	r3
     e0c:	4681      	mov	r9, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
     e0e:	0020      	movs	r0, r4
     e10:	4b10      	ldr	r3, [pc, #64]	; (e54 <flash_read+0xa0>)
     e12:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
     e14:	464b      	mov	r3, r9
     e16:	4358      	muls	r0, r3
     e18:	42b8      	cmp	r0, r7
     e1a:	d30f      	bcc.n	e3c <flash_read+0x88>
     e1c:	19eb      	adds	r3, r5, r7
     e1e:	4298      	cmp	r0, r3
     e20:	d30f      	bcc.n	e42 <flash_read+0x8e>
	_flash_read(&flash->dev, src_addr, buffer, length);
     e22:	002b      	movs	r3, r5
     e24:	0032      	movs	r2, r6
     e26:	0039      	movs	r1, r7
     e28:	9801      	ldr	r0, [sp, #4]
     e2a:	4c0b      	ldr	r4, [pc, #44]	; (e58 <flash_read+0xa4>)
     e2c:	47a0      	blx	r4
	return ERR_NONE;
     e2e:	2000      	movs	r0, #0
}
     e30:	b002      	add	sp, #8
     e32:	bc04      	pop	{r2}
     e34:	4691      	mov	r9, r2
     e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(flash && buffer && length);
     e38:	2000      	movs	r0, #0
     e3a:	e7df      	b.n	dfc <flash_read+0x48>
		return ERR_BAD_ADDRESS;
     e3c:	200e      	movs	r0, #14
     e3e:	4240      	negs	r0, r0
     e40:	e7f6      	b.n	e30 <flash_read+0x7c>
     e42:	200e      	movs	r0, #14
     e44:	4240      	negs	r0, r0
     e46:	e7f3      	b.n	e30 <flash_read+0x7c>
     e48:	000016d0 	.word	0x000016d0
     e4c:	00001135 	.word	0x00001135
     e50:	00001301 	.word	0x00001301
     e54:	00001305 	.word	0x00001305
     e58:	0000130b 	.word	0x0000130b

00000e5c <flash_write>:
{
     e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e5e:	46c6      	mov	lr, r8
     e60:	b500      	push	{lr}
     e62:	b082      	sub	sp, #8
     e64:	0004      	movs	r4, r0
     e66:	000d      	movs	r5, r1
     e68:	0017      	movs	r7, r2
     e6a:	001e      	movs	r6, r3
	ASSERT(flash && buffer && length);
     e6c:	2800      	cmp	r0, #0
     e6e:	d018      	beq.n	ea2 <flash_write+0x46>
     e70:	2a00      	cmp	r2, #0
     e72:	d03c      	beq.n	eee <flash_write+0x92>
     e74:	2001      	movs	r0, #1
     e76:	2b00      	cmp	r3, #0
     e78:	d114      	bne.n	ea4 <flash_write+0x48>
     e7a:	226a      	movs	r2, #106	; 0x6a
     e7c:	4921      	ldr	r1, [pc, #132]	; (f04 <flash_write+0xa8>)
     e7e:	2000      	movs	r0, #0
     e80:	4b21      	ldr	r3, [pc, #132]	; (f08 <flash_write+0xac>)
     e82:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
     e84:	9401      	str	r4, [sp, #4]
     e86:	0020      	movs	r0, r4
     e88:	4b20      	ldr	r3, [pc, #128]	; (f0c <flash_write+0xb0>)
     e8a:	4798      	blx	r3
     e8c:	4680      	mov	r8, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
     e8e:	0020      	movs	r0, r4
     e90:	4b1f      	ldr	r3, [pc, #124]	; (f10 <flash_write+0xb4>)
     e92:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
     e94:	4643      	mov	r3, r8
     e96:	4358      	muls	r0, r3
     e98:	4285      	cmp	r5, r0
     e9a:	d916      	bls.n	eca <flash_write+0x6e>
		return ERR_BAD_ADDRESS;
     e9c:	200e      	movs	r0, #14
     e9e:	4240      	negs	r0, r0
     ea0:	e021      	b.n	ee6 <flash_write+0x8a>
	ASSERT(flash && buffer && length);
     ea2:	2000      	movs	r0, #0
     ea4:	226a      	movs	r2, #106	; 0x6a
     ea6:	4917      	ldr	r1, [pc, #92]	; (f04 <flash_write+0xa8>)
     ea8:	4b17      	ldr	r3, [pc, #92]	; (f08 <flash_write+0xac>)
     eaa:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
     eac:	9401      	str	r4, [sp, #4]
     eae:	0020      	movs	r0, r4
     eb0:	4b16      	ldr	r3, [pc, #88]	; (f0c <flash_write+0xb0>)
     eb2:	4798      	blx	r3
     eb4:	4680      	mov	r8, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
     eb6:	0020      	movs	r0, r4
     eb8:	4b15      	ldr	r3, [pc, #84]	; (f10 <flash_write+0xb4>)
     eba:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
     ebc:	4643      	mov	r3, r8
     ebe:	4358      	muls	r0, r3
     ec0:	42a8      	cmp	r0, r5
     ec2:	d316      	bcc.n	ef2 <flash_write+0x96>
     ec4:	1973      	adds	r3, r6, r5
     ec6:	4298      	cmp	r0, r3
     ec8:	d316      	bcc.n	ef8 <flash_write+0x9c>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
     eca:	0029      	movs	r1, r5
     ecc:	9c01      	ldr	r4, [sp, #4]
     ece:	0020      	movs	r0, r4
     ed0:	4b10      	ldr	r3, [pc, #64]	; (f14 <flash_write+0xb8>)
     ed2:	4798      	blx	r3
     ed4:	2800      	cmp	r0, #0
     ed6:	d112      	bne.n	efe <flash_write+0xa2>
	_flash_write(&flash->dev, dst_addr, buffer, length);
     ed8:	0033      	movs	r3, r6
     eda:	003a      	movs	r2, r7
     edc:	0029      	movs	r1, r5
     ede:	0020      	movs	r0, r4
     ee0:	4c0d      	ldr	r4, [pc, #52]	; (f18 <flash_write+0xbc>)
     ee2:	47a0      	blx	r4
	return ERR_NONE;
     ee4:	2000      	movs	r0, #0
}
     ee6:	b002      	add	sp, #8
     ee8:	bc04      	pop	{r2}
     eea:	4690      	mov	r8, r2
     eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(flash && buffer && length);
     eee:	2000      	movs	r0, #0
     ef0:	e7d8      	b.n	ea4 <flash_write+0x48>
		return ERR_BAD_ADDRESS;
     ef2:	200e      	movs	r0, #14
     ef4:	4240      	negs	r0, r0
     ef6:	e7f6      	b.n	ee6 <flash_write+0x8a>
     ef8:	200e      	movs	r0, #14
     efa:	4240      	negs	r0, r0
     efc:	e7f3      	b.n	ee6 <flash_write+0x8a>
		return ERR_DENIED;
     efe:	2011      	movs	r0, #17
     f00:	4240      	negs	r0, r0
     f02:	e7f0      	b.n	ee6 <flash_write+0x8a>
     f04:	000016d0 	.word	0x000016d0
     f08:	00001135 	.word	0x00001135
     f0c:	00001301 	.word	0x00001301
     f10:	00001305 	.word	0x00001305
     f14:	00001479 	.word	0x00001479
     f18:	0000135d 	.word	0x0000135d

00000f1c <flash_get_page_size>:
{
     f1c:	b510      	push	{r4, lr}
     f1e:	0004      	movs	r4, r0
	ASSERT(flash);
     f20:	1e43      	subs	r3, r0, #1
     f22:	4198      	sbcs	r0, r3
     f24:	b2c0      	uxtb	r0, r0
     f26:	22f7      	movs	r2, #247	; 0xf7
     f28:	4903      	ldr	r1, [pc, #12]	; (f38 <flash_get_page_size+0x1c>)
     f2a:	4b04      	ldr	r3, [pc, #16]	; (f3c <flash_get_page_size+0x20>)
     f2c:	4798      	blx	r3
	return _flash_get_page_size(&flash->dev);
     f2e:	0020      	movs	r0, r4
     f30:	4b03      	ldr	r3, [pc, #12]	; (f40 <flash_get_page_size+0x24>)
     f32:	4798      	blx	r3
}
     f34:	bd10      	pop	{r4, pc}
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	000016d0 	.word	0x000016d0
     f3c:	00001135 	.word	0x00001135
     f40:	00001301 	.word	0x00001301

00000f44 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     f44:	b570      	push	{r4, r5, r6, lr}
     f46:	0006      	movs	r6, r0
     f48:	000c      	movs	r4, r1
     f4a:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     f4c:	2800      	cmp	r0, #0
     f4e:	d00d      	beq.n	f6c <io_write+0x28>
     f50:	0008      	movs	r0, r1
     f52:	1e43      	subs	r3, r0, #1
     f54:	4198      	sbcs	r0, r3
     f56:	b2c0      	uxtb	r0, r0
     f58:	2234      	movs	r2, #52	; 0x34
     f5a:	4905      	ldr	r1, [pc, #20]	; (f70 <io_write+0x2c>)
     f5c:	4b05      	ldr	r3, [pc, #20]	; (f74 <io_write+0x30>)
     f5e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     f60:	6833      	ldr	r3, [r6, #0]
     f62:	002a      	movs	r2, r5
     f64:	0021      	movs	r1, r4
     f66:	0030      	movs	r0, r6
     f68:	4798      	blx	r3
}
     f6a:	bd70      	pop	{r4, r5, r6, pc}
     f6c:	2000      	movs	r0, #0
     f6e:	e7f3      	b.n	f58 <io_write+0x14>
     f70:	000016e8 	.word	0x000016e8
     f74:	00001135 	.word	0x00001135

00000f78 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     f78:	b570      	push	{r4, r5, r6, lr}
     f7a:	0006      	movs	r6, r0
     f7c:	000c      	movs	r4, r1
     f7e:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     f80:	2800      	cmp	r0, #0
     f82:	d00d      	beq.n	fa0 <io_read+0x28>
     f84:	0008      	movs	r0, r1
     f86:	1e43      	subs	r3, r0, #1
     f88:	4198      	sbcs	r0, r3
     f8a:	b2c0      	uxtb	r0, r0
     f8c:	223d      	movs	r2, #61	; 0x3d
     f8e:	4905      	ldr	r1, [pc, #20]	; (fa4 <io_read+0x2c>)
     f90:	4b05      	ldr	r3, [pc, #20]	; (fa8 <io_read+0x30>)
     f92:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     f94:	6873      	ldr	r3, [r6, #4]
     f96:	002a      	movs	r2, r5
     f98:	0021      	movs	r1, r4
     f9a:	0030      	movs	r0, r6
     f9c:	4798      	blx	r3
}
     f9e:	bd70      	pop	{r4, r5, r6, pc}
     fa0:	2000      	movs	r0, #0
     fa2:	e7f3      	b.n	f8c <io_read+0x14>
     fa4:	000016e8 	.word	0x000016e8
     fa8:	00001135 	.word	0x00001135

00000fac <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fae:	46ce      	mov	lr, r9
     fb0:	4647      	mov	r7, r8
     fb2:	b580      	push	{r7, lr}
     fb4:	0004      	movs	r4, r0
     fb6:	000f      	movs	r7, r1
     fb8:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     fba:	2800      	cmp	r0, #0
     fbc:	d026      	beq.n	100c <usart_sync_write+0x60>
     fbe:	2900      	cmp	r1, #0
     fc0:	d026      	beq.n	1010 <usart_sync_write+0x64>
     fc2:	0010      	movs	r0, r2
     fc4:	1e43      	subs	r3, r0, #1
     fc6:	4198      	sbcs	r0, r3
     fc8:	22f1      	movs	r2, #241	; 0xf1
     fca:	4912      	ldr	r1, [pc, #72]	; (1014 <usart_sync_write+0x68>)
     fcc:	4b12      	ldr	r3, [pc, #72]	; (1018 <usart_sync_write+0x6c>)
     fce:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     fd0:	3408      	adds	r4, #8
     fd2:	4d12      	ldr	r5, [pc, #72]	; (101c <usart_sync_write+0x70>)
     fd4:	0020      	movs	r0, r4
     fd6:	47a8      	blx	r5
     fd8:	2800      	cmp	r0, #0
     fda:	d0fb      	beq.n	fd4 <usart_sync_write+0x28>
     fdc:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     fde:	4b10      	ldr	r3, [pc, #64]	; (1020 <usart_sync_write+0x74>)
     fe0:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     fe2:	4d0e      	ldr	r5, [pc, #56]	; (101c <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     fe4:	5db9      	ldrb	r1, [r7, r6]
     fe6:	0020      	movs	r0, r4
     fe8:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     fea:	0020      	movs	r0, r4
     fec:	47a8      	blx	r5
     fee:	2800      	cmp	r0, #0
     ff0:	d0fb      	beq.n	fea <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     ff2:	3601      	adds	r6, #1
     ff4:	4546      	cmp	r6, r8
     ff6:	d3f5      	bcc.n	fe4 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     ff8:	4d0a      	ldr	r5, [pc, #40]	; (1024 <usart_sync_write+0x78>)
     ffa:	0020      	movs	r0, r4
     ffc:	47a8      	blx	r5
     ffe:	2800      	cmp	r0, #0
    1000:	d0fb      	beq.n	ffa <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
    1002:	0030      	movs	r0, r6
    1004:	bc0c      	pop	{r2, r3}
    1006:	4690      	mov	r8, r2
    1008:	4699      	mov	r9, r3
    100a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    100c:	2000      	movs	r0, #0
    100e:	e7db      	b.n	fc8 <usart_sync_write+0x1c>
    1010:	2000      	movs	r0, #0
    1012:	e7d9      	b.n	fc8 <usart_sync_write+0x1c>
    1014:	000016fc 	.word	0x000016fc
    1018:	00001135 	.word	0x00001135
    101c:	00001609 	.word	0x00001609
    1020:	000015f9 	.word	0x000015f9
    1024:	00001613 	.word	0x00001613

00001028 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    102a:	46ce      	mov	lr, r9
    102c:	4647      	mov	r7, r8
    102e:	b580      	push	{r7, lr}
    1030:	0004      	movs	r4, r0
    1032:	000f      	movs	r7, r1
    1034:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    1036:	2800      	cmp	r0, #0
    1038:	d01d      	beq.n	1076 <usart_sync_read+0x4e>
    103a:	2900      	cmp	r1, #0
    103c:	d01d      	beq.n	107a <usart_sync_read+0x52>
    103e:	0010      	movs	r0, r2
    1040:	1e43      	subs	r3, r0, #1
    1042:	4198      	sbcs	r0, r3
    1044:	2286      	movs	r2, #134	; 0x86
    1046:	0052      	lsls	r2, r2, #1
    1048:	490d      	ldr	r1, [pc, #52]	; (1080 <usart_sync_read+0x58>)
    104a:	4b0e      	ldr	r3, [pc, #56]	; (1084 <usart_sync_read+0x5c>)
    104c:	4798      	blx	r3
	uint32_t                      offset = 0;
    104e:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1050:	3408      	adds	r4, #8
    1052:	4d0d      	ldr	r5, [pc, #52]	; (1088 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1054:	4b0d      	ldr	r3, [pc, #52]	; (108c <usart_sync_read+0x64>)
    1056:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
    1058:	0020      	movs	r0, r4
    105a:	47a8      	blx	r5
    105c:	2800      	cmp	r0, #0
    105e:	d0fb      	beq.n	1058 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1060:	0020      	movs	r0, r4
    1062:	47c8      	blx	r9
    1064:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
    1066:	3601      	adds	r6, #1
    1068:	4546      	cmp	r6, r8
    106a:	d3f5      	bcc.n	1058 <usart_sync_read+0x30>

	return (int32_t)offset;
}
    106c:	0030      	movs	r0, r6
    106e:	bc0c      	pop	{r2, r3}
    1070:	4690      	mov	r8, r2
    1072:	4699      	mov	r9, r3
    1074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    1076:	2000      	movs	r0, #0
    1078:	e7e4      	b.n	1044 <usart_sync_read+0x1c>
    107a:	2000      	movs	r0, #0
    107c:	e7e2      	b.n	1044 <usart_sync_read+0x1c>
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	000016fc 	.word	0x000016fc
    1084:	00001135 	.word	0x00001135
    1088:	0000161d 	.word	0x0000161d
    108c:	00001601 	.word	0x00001601

00001090 <usart_sync_init>:
{
    1090:	b570      	push	{r4, r5, r6, lr}
    1092:	0005      	movs	r5, r0
    1094:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    1096:	2800      	cmp	r0, #0
    1098:	d013      	beq.n	10c2 <usart_sync_init+0x32>
    109a:	0008      	movs	r0, r1
    109c:	1e43      	subs	r3, r0, #1
    109e:	4198      	sbcs	r0, r3
    10a0:	b2c0      	uxtb	r0, r0
    10a2:	2234      	movs	r2, #52	; 0x34
    10a4:	4908      	ldr	r1, [pc, #32]	; (10c8 <usart_sync_init+0x38>)
    10a6:	4b09      	ldr	r3, [pc, #36]	; (10cc <usart_sync_init+0x3c>)
    10a8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    10aa:	0028      	movs	r0, r5
    10ac:	3008      	adds	r0, #8
    10ae:	0021      	movs	r1, r4
    10b0:	4b07      	ldr	r3, [pc, #28]	; (10d0 <usart_sync_init+0x40>)
    10b2:	4798      	blx	r3
	if (init_status) {
    10b4:	2800      	cmp	r0, #0
    10b6:	d103      	bne.n	10c0 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
    10b8:	4b06      	ldr	r3, [pc, #24]	; (10d4 <usart_sync_init+0x44>)
    10ba:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
    10bc:	4b06      	ldr	r3, [pc, #24]	; (10d8 <usart_sync_init+0x48>)
    10be:	602b      	str	r3, [r5, #0]
}
    10c0:	bd70      	pop	{r4, r5, r6, pc}
    10c2:	2000      	movs	r0, #0
    10c4:	e7ed      	b.n	10a2 <usart_sync_init+0x12>
    10c6:	46c0      	nop			; (mov r8, r8)
    10c8:	000016fc 	.word	0x000016fc
    10cc:	00001135 	.word	0x00001135
    10d0:	000015b9 	.word	0x000015b9
    10d4:	00001029 	.word	0x00001029
    10d8:	00000fad 	.word	0x00000fad

000010dc <usart_sync_enable>:
{
    10dc:	b510      	push	{r4, lr}
    10de:	0004      	movs	r4, r0
	ASSERT(descr);
    10e0:	1e43      	subs	r3, r0, #1
    10e2:	4198      	sbcs	r0, r3
    10e4:	b2c0      	uxtb	r0, r0
    10e6:	2253      	movs	r2, #83	; 0x53
    10e8:	4904      	ldr	r1, [pc, #16]	; (10fc <usart_sync_enable+0x20>)
    10ea:	4b05      	ldr	r3, [pc, #20]	; (1100 <usart_sync_enable+0x24>)
    10ec:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    10ee:	0020      	movs	r0, r4
    10f0:	3008      	adds	r0, #8
    10f2:	4b04      	ldr	r3, [pc, #16]	; (1104 <usart_sync_enable+0x28>)
    10f4:	4798      	blx	r3
}
    10f6:	2000      	movs	r0, #0
    10f8:	bd10      	pop	{r4, pc}
    10fa:	46c0      	nop			; (mov r8, r8)
    10fc:	000016fc 	.word	0x000016fc
    1100:	00001135 	.word	0x00001135
    1104:	000015e5 	.word	0x000015e5

00001108 <usart_sync_get_io_descriptor>:
{
    1108:	b570      	push	{r4, r5, r6, lr}
    110a:	0004      	movs	r4, r0
    110c:	000d      	movs	r5, r1
	ASSERT(descr && io);
    110e:	2800      	cmp	r0, #0
    1110:	d00a      	beq.n	1128 <usart_sync_get_io_descriptor+0x20>
    1112:	0008      	movs	r0, r1
    1114:	1e43      	subs	r3, r0, #1
    1116:	4198      	sbcs	r0, r3
    1118:	b2c0      	uxtb	r0, r0
    111a:	2269      	movs	r2, #105	; 0x69
    111c:	4903      	ldr	r1, [pc, #12]	; (112c <usart_sync_get_io_descriptor+0x24>)
    111e:	4b04      	ldr	r3, [pc, #16]	; (1130 <usart_sync_get_io_descriptor+0x28>)
    1120:	4798      	blx	r3
	*io = &descr->io;
    1122:	602c      	str	r4, [r5, #0]
}
    1124:	2000      	movs	r0, #0
    1126:	bd70      	pop	{r4, r5, r6, pc}
    1128:	2000      	movs	r0, #0
    112a:	e7f6      	b.n	111a <usart_sync_get_io_descriptor+0x12>
    112c:	000016fc 	.word	0x000016fc
    1130:	00001135 	.word	0x00001135

00001134 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1134:	2800      	cmp	r0, #0
    1136:	d100      	bne.n	113a <assert+0x6>
		__asm("BKPT #0");
    1138:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    113a:	4770      	bx	lr

0000113c <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    113c:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
    113e:	0103      	lsls	r3, r0, #4
    1140:	1a18      	subs	r0, r3, r0
    1142:	0100      	lsls	r0, r0, #4
    1144:	3002      	adds	r0, #2
    1146:	2103      	movs	r1, #3
    1148:	4b02      	ldr	r3, [pc, #8]	; (1154 <_get_cycles_for_ms+0x18>)
    114a:	4798      	blx	r3
    114c:	2364      	movs	r3, #100	; 0x64
    114e:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1150:	bd10      	pop	{r4, pc}
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	000011af 	.word	0x000011af

00001158 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    1158:	3901      	subs	r1, #1
    115a:	d8fd      	bhi.n	1158 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    115c:	4770      	bx	lr
	...

00001160 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1160:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1162:	4b08      	ldr	r3, [pc, #32]	; (1184 <_init_chip+0x24>)
    1164:	685a      	ldr	r2, [r3, #4]
    1166:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1168:	4b07      	ldr	r3, [pc, #28]	; (1188 <_init_chip+0x28>)
    116a:	4798      	blx	r3
	_oscctrl_init_sources();
    116c:	4b07      	ldr	r3, [pc, #28]	; (118c <_init_chip+0x2c>)
    116e:	4798      	blx	r3
	_mclk_init();
    1170:	4b07      	ldr	r3, [pc, #28]	; (1190 <_init_chip+0x30>)
    1172:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1174:	4b07      	ldr	r3, [pc, #28]	; (1194 <_init_chip+0x34>)
    1176:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1178:	20ff      	movs	r0, #255	; 0xff
    117a:	4b07      	ldr	r3, [pc, #28]	; (1198 <_init_chip+0x38>)
    117c:	4798      	blx	r3

	_div_init();
    117e:	4b07      	ldr	r3, [pc, #28]	; (119c <_init_chip+0x3c>)
    1180:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    1182:	bd10      	pop	{r4, pc}
    1184:	41004000 	.word	0x41004000
    1188:	000014c1 	.word	0x000014c1
    118c:	000014d9 	.word	0x000014d9
    1190:	00001209 	.word	0x00001209
    1194:	00001519 	.word	0x00001519
    1198:	000011e5 	.word	0x000011e5
    119c:	000011a1 	.word	0x000011a1

000011a0 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
    11a0:	2290      	movs	r2, #144	; 0x90
    11a2:	05d2      	lsls	r2, r2, #23
    11a4:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
    11a6:	2102      	movs	r1, #2
    11a8:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
    11aa:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
    11ac:	4770      	bx	lr

000011ae <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
    11ae:	b510      	push	{r4, lr}
    11b0:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    11b2:	f3ef 8310 	mrs	r3, PRIMASK
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
    11b6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    11b8:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
    11ba:	2390      	movs	r3, #144	; 0x90
    11bc:	05db      	lsls	r3, r3, #23
    11be:	781a      	ldrb	r2, [r3, #0]
    11c0:	2401      	movs	r4, #1
    11c2:	43a2      	bics	r2, r4
    11c4:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
    11c6:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
    11c8:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
    11ca:	001a      	movs	r2, r3
    11cc:	7913      	ldrb	r3, [r2, #4]
    11ce:	07db      	lsls	r3, r3, #31
    11d0:	d4fc      	bmi.n	11cc <__aeabi_uidiv+0x1e>
	_divas_div(0, numerator, denominator);
	res = _divas_result32();
    11d2:	2390      	movs	r3, #144	; 0x90
    11d4:	05db      	lsls	r3, r3, #23
    11d6:	6918      	ldr	r0, [r3, #16]
	_DIVAS_CRITICAL_LEAVE();
    11d8:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    11da:	f383 8810 	msr	PRIMASK, r3
	return res;
}
    11de:	b002      	add	sp, #8
    11e0:	bd10      	pop	{r4, pc}
	...

000011e4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    11e4:	07c3      	lsls	r3, r0, #31
    11e6:	d507      	bpl.n	11f8 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    11e8:	4a04      	ldr	r2, [pc, #16]	; (11fc <_gclk_init_generators_by_fref+0x18>)
    11ea:	4b05      	ldr	r3, [pc, #20]	; (1200 <_gclk_init_generators_by_fref+0x1c>)
    11ec:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    11ee:	0019      	movs	r1, r3
    11f0:	4a04      	ldr	r2, [pc, #16]	; (1204 <_gclk_init_generators_by_fref+0x20>)
    11f2:	684b      	ldr	r3, [r1, #4]
    11f4:	4213      	tst	r3, r2
    11f6:	d1fc      	bne.n	11f2 <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    11f8:	4770      	bx	lr
    11fa:	46c0      	nop			; (mov r8, r8)
    11fc:	00010106 	.word	0x00010106
    1200:	40001c00 	.word	0x40001c00
    1204:	000007fd 	.word	0x000007fd

00001208 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1208:	2201      	movs	r2, #1
    120a:	4b01      	ldr	r3, [pc, #4]	; (1210 <_mclk_init+0x8>)
    120c:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    120e:	4770      	bx	lr
    1210:	40000800 	.word	0x40000800

00001214 <_flash_program>:
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size,
                           uint32_t nvmctrl_cmd)
{
    1214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1216:	0004      	movs	r4, r0
    1218:	000d      	movs	r5, r1
    121a:	0017      	movs	r7, r2
    121c:	001e      	movs	r6, r3
	ASSERT(!(dst_addr % 2));
    121e:	2301      	movs	r3, #1
    1220:	404b      	eors	r3, r1
    1222:	2001      	movs	r0, #1
    1224:	4018      	ands	r0, r3
    1226:	22c5      	movs	r2, #197	; 0xc5
    1228:	0052      	lsls	r2, r2, #1
    122a:	4919      	ldr	r1, [pc, #100]	; (1290 <_flash_program+0x7c>)
    122c:	4b19      	ldr	r3, [pc, #100]	; (1294 <_flash_program+0x80>)
    122e:	4798      	blx	r3

	uint32_t nvm_address = dst_addr / 2;
    1230:	0868      	lsrs	r0, r5, #1
	uint16_t i, data;

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    1232:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1234:	7d23      	ldrb	r3, [r4, #20]
    1236:	4213      	tst	r3, r2
    1238:	d0fc      	beq.n	1234 <_flash_program+0x20>
	((Nvmctrl *)hw)->CTRLA.reg = data;
    123a:	4b17      	ldr	r3, [pc, #92]	; (1298 <_flash_program+0x84>)
    123c:	8023      	strh	r3, [r4, #0]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLA_reg(hw, NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY);

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    123e:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1240:	7d23      	ldrb	r3, [r4, #20]
    1242:	4213      	tst	r3, r2
    1244:	d0fc      	beq.n	1240 <_flash_program+0x2c>
}

static inline void hri_nvmctrl_clear_STATUS_reg(const void *const hw, hri_nvmctrl_status_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->STATUS.reg = mask;
    1246:	2320      	movs	r3, #32
    1248:	33ff      	adds	r3, #255	; 0xff
    124a:	8323      	strh	r3, [r4, #24]
	}

	/* Clear flags */
	hri_nvmctrl_clear_STATUS_reg(hw, NVMCTRL_STATUS_MASK);

	for (i = 0; i < size; i += 2) {
    124c:	2e00      	cmp	r6, #0
    124e:	d00e      	beq.n	126e <_flash_program+0x5a>
    1250:	3b1f      	subs	r3, #31
    1252:	3bff      	subs	r3, #255	; 0xff
    1254:	0029      	movs	r1, r5
    1256:	4399      	bics	r1, r3
    1258:	2300      	movs	r3, #0
		data = buffer[i];
    125a:	5cfd      	ldrb	r5, [r7, r3]
    125c:	b2aa      	uxth	r2, r5
		if (i < NVMCTRL_PAGE_SIZE - 1) {
    125e:	2b3e      	cmp	r3, #62	; 0x3e
    1260:	d910      	bls.n	1284 <_flash_program+0x70>
			data |= (buffer[i + 1] << 8);
		}
		NVM_MEMORY[nvm_address++] = data;
    1262:	800a      	strh	r2, [r1, #0]
	for (i = 0; i < size; i += 2) {
    1264:	3302      	adds	r3, #2
    1266:	b29b      	uxth	r3, r3
    1268:	3102      	adds	r1, #2
    126a:	429e      	cmp	r6, r3
    126c:	d8f5      	bhi.n	125a <_flash_program+0x46>
	}

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    126e:	2201      	movs	r2, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1270:	7d23      	ldrb	r3, [r4, #20]
    1272:	4213      	tst	r3, r2
    1274:	d0fc      	beq.n	1270 <_flash_program+0x5c>
	((Nvmctrl *)hw)->ADDR.reg = data;
    1276:	61e0      	str	r0, [r4, #28]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
	hri_nvmctrl_write_CTRLA_reg(hw, nvmctrl_cmd | NVMCTRL_CTRLA_CMDEX_KEY);
    1278:	4b08      	ldr	r3, [pc, #32]	; (129c <_flash_program+0x88>)
    127a:	9a06      	ldr	r2, [sp, #24]
    127c:	4313      	orrs	r3, r2
    127e:	b29b      	uxth	r3, r3
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1280:	8023      	strh	r3, [r4, #0]
}
    1282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data |= (buffer[i + 1] << 8);
    1284:	18fa      	adds	r2, r7, r3
    1286:	7852      	ldrb	r2, [r2, #1]
    1288:	0212      	lsls	r2, r2, #8
    128a:	432a      	orrs	r2, r5
    128c:	e7e9      	b.n	1262 <_flash_program+0x4e>
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	00001718 	.word	0x00001718
    1294:	00001135 	.word	0x00001135
    1298:	ffffa544 	.word	0xffffa544
    129c:	ffffa500 	.word	0xffffa500

000012a0 <_flash_init>:
{
    12a0:	b570      	push	{r4, r5, r6, lr}
    12a2:	0005      	movs	r5, r0
    12a4:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    12a6:	2800      	cmp	r0, #0
    12a8:	d01d      	beq.n	12e6 <_flash_init+0x46>
    12aa:	4b10      	ldr	r3, [pc, #64]	; (12ec <_flash_init+0x4c>)
    12ac:	18c8      	adds	r0, r1, r3
    12ae:	4243      	negs	r3, r0
    12b0:	4158      	adcs	r0, r3
    12b2:	b2c0      	uxtb	r0, r0
    12b4:	2246      	movs	r2, #70	; 0x46
    12b6:	490e      	ldr	r1, [pc, #56]	; (12f0 <_flash_init+0x50>)
    12b8:	4b0e      	ldr	r3, [pc, #56]	; (12f4 <_flash_init+0x54>)
    12ba:	4798      	blx	r3
	device->hw = hw;
    12bc:	612c      	str	r4, [r5, #16]
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
    12be:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
    12c0:	239e      	movs	r3, #158	; 0x9e
    12c2:	4013      	ands	r3, r2
	((Nvmctrl *)hw)->CTRLB.reg = data;
    12c4:	6063      	str	r3, [r4, #4]
	_nvm_dev = device;
    12c6:	4b0c      	ldr	r3, [pc, #48]	; (12f8 <_flash_init+0x58>)
    12c8:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12ca:	4b0c      	ldr	r3, [pc, #48]	; (12fc <_flash_init+0x5c>)
    12cc:	2240      	movs	r2, #64	; 0x40
    12ce:	2180      	movs	r1, #128	; 0x80
    12d0:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    12d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12d6:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12da:	3101      	adds	r1, #1
    12dc:	31ff      	adds	r1, #255	; 0xff
    12de:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12e0:	601a      	str	r2, [r3, #0]
}
    12e2:	2000      	movs	r0, #0
    12e4:	bd70      	pop	{r4, r5, r6, pc}
    12e6:	2000      	movs	r0, #0
    12e8:	e7e4      	b.n	12b4 <_flash_init+0x14>
    12ea:	46c0      	nop			; (mov r8, r8)
    12ec:	beffc000 	.word	0xbeffc000
    12f0:	00001718 	.word	0x00001718
    12f4:	00001135 	.word	0x00001135
    12f8:	20000020 	.word	0x20000020
    12fc:	e000e100 	.word	0xe000e100

00001300 <_flash_get_page_size>:
}
    1300:	2040      	movs	r0, #64	; 0x40
    1302:	4770      	bx	lr

00001304 <_flash_get_total_pages>:
}
    1304:	2080      	movs	r0, #128	; 0x80
    1306:	0140      	lsls	r0, r0, #5
    1308:	4770      	bx	lr

0000130a <_flash_read>:
{
    130a:	b570      	push	{r4, r5, r6, lr}
	uint32_t nvm_address = src_addr / 2;
    130c:	084c      	lsrs	r4, r1, #1
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
    130e:	6905      	ldr	r5, [r0, #16]
    1310:	2601      	movs	r6, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1312:	7d28      	ldrb	r0, [r5, #20]
    1314:	4230      	tst	r0, r6
    1316:	d0fc      	beq.n	1312 <_flash_read+0x8>
	((Nvmctrl *)hw)->STATUS.reg = mask;
    1318:	2020      	movs	r0, #32
    131a:	30ff      	adds	r0, #255	; 0xff
    131c:	8328      	strh	r0, [r5, #24]
		i = 0;
    131e:	2000      	movs	r0, #0
	if (src_addr % 2) {
    1320:	07cd      	lsls	r5, r1, #31
    1322:	d505      	bpl.n	1330 <_flash_read+0x26>
		data      = NVM_MEMORY[nvm_address++];
    1324:	3401      	adds	r4, #1
    1326:	3001      	adds	r0, #1
    1328:	4381      	bics	r1, r0
    132a:	8809      	ldrh	r1, [r1, #0]
		buffer[0] = data >> 8;
    132c:	0a09      	lsrs	r1, r1, #8
    132e:	7011      	strb	r1, [r2, #0]
	while (i < length) {
    1330:	4298      	cmp	r0, r3
    1332:	d211      	bcs.n	1358 <_flash_read+0x4e>
    1334:	1812      	adds	r2, r2, r0
    1336:	0064      	lsls	r4, r4, #1
    1338:	1a24      	subs	r4, r4, r0
		if (i < (length - 1)) {
    133a:	1e5d      	subs	r5, r3, #1
    133c:	e003      	b.n	1346 <_flash_read+0x3c>
		i += 2;
    133e:	3002      	adds	r0, #2
    1340:	3202      	adds	r2, #2
	while (i < length) {
    1342:	4283      	cmp	r3, r0
    1344:	d908      	bls.n	1358 <_flash_read+0x4e>
    1346:	1821      	adds	r1, r4, r0
		data      = NVM_MEMORY[nvm_address++];
    1348:	8809      	ldrh	r1, [r1, #0]
    134a:	b289      	uxth	r1, r1
		buffer[i] = (data & 0xFF);
    134c:	7011      	strb	r1, [r2, #0]
		if (i < (length - 1)) {
    134e:	4285      	cmp	r5, r0
    1350:	d9f5      	bls.n	133e <_flash_read+0x34>
			buffer[i + 1] = (data >> 8);
    1352:	0a09      	lsrs	r1, r1, #8
    1354:	7051      	strb	r1, [r2, #1]
    1356:	e7f2      	b.n	133e <_flash_read+0x34>
}
    1358:	bd70      	pop	{r4, r5, r6, pc}
	...

0000135c <_flash_write>:
{
    135c:	b5f0      	push	{r4, r5, r6, r7, lr}
    135e:	46de      	mov	lr, fp
    1360:	4657      	mov	r7, sl
    1362:	464e      	mov	r6, r9
    1364:	4645      	mov	r5, r8
    1366:	b5e0      	push	{r5, r6, r7, lr}
    1368:	b0c5      	sub	sp, #276	; 0x114
    136a:	4683      	mov	fp, r0
    136c:	0016      	movs	r6, r2
    136e:	001d      	movs	r5, r3
	uint32_t wr_start_addr = dst_addr;
    1370:	000c      	movs	r4, r1
    1372:	e02e      	b.n	13d2 <_flash_write+0x76>
    1374:	46ba      	mov	sl, r7
    1376:	4667      	mov	r7, ip
		_flash_erase_row(device->hw, row_start_addr, NVMCTRL_CTRLA_CMD_ER);
    1378:	465b      	mov	r3, fp
    137a:	691a      	ldr	r2, [r3, #16]
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    137c:	2101      	movs	r1, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    137e:	7d13      	ldrb	r3, [r2, #20]
    1380:	420b      	tst	r3, r1
    1382:	d0fc      	beq.n	137e <_flash_write+0x22>
	((Nvmctrl *)hw)->STATUS.reg = mask;
    1384:	2320      	movs	r3, #32
    1386:	33ff      	adds	r3, #255	; 0xff
    1388:	8313      	strh	r3, [r2, #24]
	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
    138a:	464b      	mov	r3, r9
    138c:	085b      	lsrs	r3, r3, #1
	((Nvmctrl *)hw)->ADDR.reg = data;
    138e:	61d3      	str	r3, [r2, #28]
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1390:	4b36      	ldr	r3, [pc, #216]	; (146c <_flash_write+0x110>)
    1392:	8013      	strh	r3, [r2, #0]
			_flash_program(device->hw,
    1394:	002b      	movs	r3, r5
    1396:	003d      	movs	r5, r7
    1398:	464f      	mov	r7, r9
    139a:	46a0      	mov	r8, r4
    139c:	9703      	str	r7, [sp, #12]
    139e:	46b1      	mov	r9, r6
    13a0:	465e      	mov	r6, fp
    13a2:	469b      	mov	fp, r3
    13a4:	9b03      	ldr	r3, [sp, #12]
    13a6:	1afa      	subs	r2, r7, r3
    13a8:	ab04      	add	r3, sp, #16
    13aa:	469c      	mov	ip, r3
    13ac:	4462      	add	r2, ip
    13ae:	2304      	movs	r3, #4
    13b0:	9300      	str	r3, [sp, #0]
    13b2:	333c      	adds	r3, #60	; 0x3c
    13b4:	0039      	movs	r1, r7
    13b6:	6930      	ldr	r0, [r6, #16]
    13b8:	4c2d      	ldr	r4, [pc, #180]	; (1470 <_flash_write+0x114>)
    13ba:	47a0      	blx	r4
    13bc:	3740      	adds	r7, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    13be:	42bd      	cmp	r5, r7
    13c0:	d1f0      	bne.n	13a4 <_flash_write+0x48>
    13c2:	4644      	mov	r4, r8
    13c4:	465d      	mov	r5, fp
    13c6:	46b3      	mov	fp, r6
    13c8:	464e      	mov	r6, r9
	} while (row_end_addr < (wr_start_addr + length - 1));
    13ca:	192b      	adds	r3, r5, r4
    13cc:	3b01      	subs	r3, #1
    13ce:	459a      	cmp	sl, r3
    13d0:	d244      	bcs.n	145c <_flash_write+0x100>
		row_start_addr = wr_start_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
    13d2:	23ff      	movs	r3, #255	; 0xff
    13d4:	0022      	movs	r2, r4
    13d6:	439a      	bics	r2, r3
    13d8:	4691      	mov	r9, r2
		row_end_addr   = row_start_addr + NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE - 1;
    13da:	444b      	add	r3, r9
    13dc:	469a      	mov	sl, r3
    13de:	2380      	movs	r3, #128	; 0x80
    13e0:	005b      	lsls	r3, r3, #1
    13e2:	444b      	add	r3, r9
    13e4:	4698      	mov	r8, r3
    13e6:	0017      	movs	r7, r2
    13e8:	4642      	mov	r2, r8
    13ea:	9203      	str	r2, [sp, #12]
    13ec:	46a0      	mov	r8, r4
    13ee:	464c      	mov	r4, r9
    13f0:	46b1      	mov	r9, r6
    13f2:	465e      	mov	r6, fp
    13f4:	46ab      	mov	fp, r5
			_flash_read(device, row_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    13f6:	1b3a      	subs	r2, r7, r4
    13f8:	ab04      	add	r3, sp, #16
    13fa:	469c      	mov	ip, r3
    13fc:	4462      	add	r2, ip
    13fe:	2340      	movs	r3, #64	; 0x40
    1400:	0039      	movs	r1, r7
    1402:	0030      	movs	r0, r6
    1404:	4d1b      	ldr	r5, [pc, #108]	; (1474 <_flash_write+0x118>)
    1406:	47a8      	blx	r5
    1408:	3740      	adds	r7, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    140a:	9b03      	ldr	r3, [sp, #12]
    140c:	429f      	cmp	r7, r3
    140e:	d1f2      	bne.n	13f6 <_flash_write+0x9a>
    1410:	465d      	mov	r5, fp
    1412:	46b3      	mov	fp, r6
    1414:	464e      	mov	r6, r9
    1416:	46a1      	mov	r9, r4
    1418:	4644      	mov	r4, r8
		j = (wr_start_addr - row_start_addr) / NVMCTRL_PAGE_SIZE;
    141a:	464b      	mov	r3, r9
    141c:	1ae3      	subs	r3, r4, r3
    141e:	0999      	lsrs	r1, r3, #6
    1420:	223f      	movs	r2, #63	; 0x3f
    1422:	4013      	ands	r3, r2
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
    1424:	4554      	cmp	r4, sl
    1426:	d8a7      	bhi.n	1378 <_flash_write+0x1c>
    1428:	2d00      	cmp	r5, #0
    142a:	d0a5      	beq.n	1378 <_flash_write+0x1c>
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
    142c:	46bc      	mov	ip, r7
    142e:	4657      	mov	r7, sl
			tmp_buffer[j][k] = *buffer;
    1430:	018a      	lsls	r2, r1, #6
    1432:	a804      	add	r0, sp, #16
    1434:	4680      	mov	r8, r0
    1436:	4442      	add	r2, r8
    1438:	7830      	ldrb	r0, [r6, #0]
    143a:	54d0      	strb	r0, [r2, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
    143c:	3301      	adds	r3, #1
    143e:	223f      	movs	r2, #63	; 0x3f
    1440:	4013      	ands	r3, r2
				j++;
    1442:	425a      	negs	r2, r3
    1444:	415a      	adcs	r2, r3
    1446:	1889      	adds	r1, r1, r2
			wr_start_addr++;
    1448:	3401      	adds	r4, #1
			buffer++;
    144a:	3601      	adds	r6, #1
			length--;
    144c:	3d01      	subs	r5, #1
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
    144e:	42a7      	cmp	r7, r4
    1450:	d390      	bcc.n	1374 <_flash_write+0x18>
    1452:	2d00      	cmp	r5, #0
    1454:	d1ec      	bne.n	1430 <_flash_write+0xd4>
    1456:	46ba      	mov	sl, r7
    1458:	4667      	mov	r7, ip
    145a:	e78d      	b.n	1378 <_flash_write+0x1c>
}
    145c:	b045      	add	sp, #276	; 0x114
    145e:	bc3c      	pop	{r2, r3, r4, r5}
    1460:	4690      	mov	r8, r2
    1462:	4699      	mov	r9, r3
    1464:	46a2      	mov	sl, r4
    1466:	46ab      	mov	fp, r5
    1468:	bdf0      	pop	{r4, r5, r6, r7, pc}
    146a:	46c0      	nop			; (mov r8, r8)
    146c:	ffffa502 	.word	0xffffa502
    1470:	00001215 	.word	0x00001215
    1474:	0000130b 	.word	0x0000130b

00001478 <_flash_is_locked>:
	return !(hri_nvmctrl_get_LOCK_reg(device->hw, 1 << region_id));
    1478:	6903      	ldr	r3, [r0, #16]
	tmp = ((Nvmctrl *)hw)->LOCK.reg;
    147a:	8c18      	ldrh	r0, [r3, #32]
    147c:	0089      	lsls	r1, r1, #2
    147e:	0c09      	lsrs	r1, r1, #16
    1480:	2301      	movs	r3, #1
    1482:	408b      	lsls	r3, r1
    1484:	4018      	ands	r0, r3
    1486:	4243      	negs	r3, r0
    1488:	4158      	adcs	r0, r3
    148a:	b2c0      	uxtb	r0, r0
}
    148c:	4770      	bx	lr
	...

00001490 <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
    1490:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
    1492:	4b0a      	ldr	r3, [pc, #40]	; (14bc <NVMCTRL_Handler+0x2c>)
    1494:	6818      	ldr	r0, [r3, #0]
    1496:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    1498:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    149a:	07d2      	lsls	r2, r2, #31
    149c:	d504      	bpl.n	14a8 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
    149e:	6803      	ldr	r3, [r0, #0]
    14a0:	2b00      	cmp	r3, #0
    14a2:	d000      	beq.n	14a6 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
    14a4:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
    14a6:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
    14a8:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
    14aa:	0792      	lsls	r2, r2, #30
    14ac:	d5fb      	bpl.n	14a6 <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
    14ae:	2202      	movs	r2, #2
    14b0:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
    14b2:	6843      	ldr	r3, [r0, #4]
    14b4:	2b00      	cmp	r3, #0
    14b6:	d0f6      	beq.n	14a6 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
    14b8:	4798      	blx	r3
}
    14ba:	e7f4      	b.n	14a6 <NVMCTRL_Handler+0x16>
    14bc:	20000020 	.word	0x20000020

000014c0 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    14c0:	4b04      	ldr	r3, [pc, #16]	; (14d4 <_osc32kctrl_init_sources+0x14>)
    14c2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    14c4:	21f8      	movs	r1, #248	; 0xf8
    14c6:	0149      	lsls	r1, r1, #5
    14c8:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    14ca:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    14cc:	2201      	movs	r2, #1
    14ce:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    14d0:	4770      	bx	lr
    14d2:	46c0      	nop			; (mov r8, r8)
    14d4:	40001400 	.word	0x40001400

000014d8 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
    14d8:	4b0e      	ldr	r3, [pc, #56]	; (1514 <_oscctrl_init_sources+0x3c>)
    14da:	2202      	movs	r2, #2
    14dc:	751a      	strb	r2, [r3, #20]
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
    14de:	3a01      	subs	r2, #1
    14e0:	755a      	strb	r2, [r3, #21]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
    14e2:	0019      	movs	r1, r3
    14e4:	3203      	adds	r2, #3
    14e6:	698b      	ldr	r3, [r1, #24]
    14e8:	421a      	tst	r2, r3
    14ea:	d1fc      	bne.n	14e6 <_oscctrl_init_sources+0xe>
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
    14ec:	4909      	ldr	r1, [pc, #36]	; (1514 <_oscctrl_init_sources+0x3c>)
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
    14ee:	2204      	movs	r2, #4
    14f0:	698b      	ldr	r3, [r1, #24]
    14f2:	421a      	tst	r2, r3
    14f4:	d1fc      	bne.n	14f0 <_oscctrl_init_sources+0x18>
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
    14f6:	2207      	movs	r2, #7
    14f8:	4b06      	ldr	r3, [pc, #24]	; (1514 <_oscctrl_init_sources+0x3c>)
    14fa:	759a      	strb	r2, [r3, #22]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
    14fc:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
    14fe:	3209      	adds	r2, #9
    1500:	68cb      	ldr	r3, [r1, #12]
    1502:	421a      	tst	r2, r3
    1504:	d0fc      	beq.n	1500 <_oscctrl_init_sources+0x28>
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
    1506:	4a03      	ldr	r2, [pc, #12]	; (1514 <_oscctrl_init_sources+0x3c>)
    1508:	7d13      	ldrb	r3, [r2, #20]
    150a:	2180      	movs	r1, #128	; 0x80
    150c:	430b      	orrs	r3, r1
    150e:	7513      	strb	r3, [r2, #20]
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1510:	4770      	bx	lr
    1512:	46c0      	nop			; (mov r8, r8)
    1514:	40001000 	.word	0x40001000

00001518 <_oscctrl_init_referenced_generators>:
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1518:	4770      	bx	lr
	...

0000151c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    151c:	b510      	push	{r4, lr}
    151e:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1520:	4b1f      	ldr	r3, [pc, #124]	; (15a0 <_usart_init+0x84>)
    1522:	18c3      	adds	r3, r0, r3
    1524:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    1526:	b2db      	uxtb	r3, r3
    1528:	2b01      	cmp	r3, #1
    152a:	d004      	beq.n	1536 <_usart_init+0x1a>
	ASSERT(false);
    152c:	4a1d      	ldr	r2, [pc, #116]	; (15a4 <_usart_init+0x88>)
    152e:	491e      	ldr	r1, [pc, #120]	; (15a8 <_usart_init+0x8c>)
    1530:	2000      	movs	r0, #0
    1532:	4b1e      	ldr	r3, [pc, #120]	; (15ac <_usart_init+0x90>)
    1534:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1536:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1538:	07db      	lsls	r3, r3, #31
    153a:	d418      	bmi.n	156e <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    153c:	2203      	movs	r2, #3
    153e:	69e3      	ldr	r3, [r4, #28]
    1540:	421a      	tst	r2, r3
    1542:	d1fc      	bne.n	153e <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1544:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1546:	079b      	lsls	r3, r3, #30
    1548:	d50b      	bpl.n	1562 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    154a:	6823      	ldr	r3, [r4, #0]
    154c:	2202      	movs	r2, #2
    154e:	4393      	bics	r3, r2
    1550:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1552:	3201      	adds	r2, #1
    1554:	69e3      	ldr	r3, [r4, #28]
    1556:	421a      	tst	r2, r3
    1558:	d1fc      	bne.n	1554 <_usart_init+0x38>
    155a:	2202      	movs	r2, #2
    155c:	69e3      	ldr	r3, [r4, #28]
    155e:	421a      	tst	r2, r3
    1560:	d1fc      	bne.n	155c <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1562:	2305      	movs	r3, #5
    1564:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1566:	2203      	movs	r2, #3
    1568:	69e3      	ldr	r3, [r4, #28]
    156a:	421a      	tst	r2, r3
    156c:	d1fc      	bne.n	1568 <_usart_init+0x4c>
    156e:	2201      	movs	r2, #1
    1570:	69e3      	ldr	r3, [r4, #28]
    1572:	421a      	tst	r2, r3
    1574:	d1fc      	bne.n	1570 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1576:	4b0e      	ldr	r3, [pc, #56]	; (15b0 <_usart_init+0x94>)
    1578:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    157a:	2203      	movs	r2, #3
    157c:	69e3      	ldr	r3, [r4, #28]
    157e:	421a      	tst	r2, r3
    1580:	d1fc      	bne.n	157c <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1582:	23c0      	movs	r3, #192	; 0xc0
    1584:	029b      	lsls	r3, r3, #10
    1586:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1588:	2207      	movs	r2, #7
    158a:	69e3      	ldr	r3, [r4, #28]
    158c:	421a      	tst	r2, r3
    158e:	d1fc      	bne.n	158a <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1590:	4b08      	ldr	r3, [pc, #32]	; (15b4 <_usart_init+0x98>)
    1592:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1594:	2300      	movs	r3, #0
    1596:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1598:	2230      	movs	r2, #48	; 0x30
    159a:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    159c:	2000      	movs	r0, #0
    159e:	bd10      	pop	{r4, pc}
    15a0:	bdfffc00 	.word	0xbdfffc00
    15a4:	0000023a 	.word	0x0000023a
    15a8:	00001738 	.word	0x00001738
    15ac:	00001135 	.word	0x00001135
    15b0:	40110004 	.word	0x40110004
    15b4:	ffffec56 	.word	0xffffec56

000015b8 <_usart_sync_init>:
{
    15b8:	b570      	push	{r4, r5, r6, lr}
    15ba:	0005      	movs	r5, r0
    15bc:	000c      	movs	r4, r1
	ASSERT(device);
    15be:	1e43      	subs	r3, r0, #1
    15c0:	4198      	sbcs	r0, r3
    15c2:	b2c0      	uxtb	r0, r0
    15c4:	22b4      	movs	r2, #180	; 0xb4
    15c6:	4904      	ldr	r1, [pc, #16]	; (15d8 <_usart_sync_init+0x20>)
    15c8:	4b04      	ldr	r3, [pc, #16]	; (15dc <_usart_sync_init+0x24>)
    15ca:	4798      	blx	r3
	device->hw = hw;
    15cc:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    15ce:	0020      	movs	r0, r4
    15d0:	4b03      	ldr	r3, [pc, #12]	; (15e0 <_usart_sync_init+0x28>)
    15d2:	4798      	blx	r3
}
    15d4:	bd70      	pop	{r4, r5, r6, pc}
    15d6:	46c0      	nop			; (mov r8, r8)
    15d8:	00001738 	.word	0x00001738
    15dc:	00001135 	.word	0x00001135
    15e0:	0000151d 	.word	0x0000151d

000015e4 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    15e4:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    15e6:	6813      	ldr	r3, [r2, #0]
    15e8:	2102      	movs	r1, #2
    15ea:	430b      	orrs	r3, r1
    15ec:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    15ee:	3101      	adds	r1, #1
    15f0:	69d3      	ldr	r3, [r2, #28]
    15f2:	4219      	tst	r1, r3
    15f4:	d1fc      	bne.n	15f0 <_usart_sync_enable+0xc>
}
    15f6:	4770      	bx	lr

000015f8 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    15f8:	6803      	ldr	r3, [r0, #0]
    15fa:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    15fc:	8519      	strh	r1, [r3, #40]	; 0x28
}
    15fe:	4770      	bx	lr

00001600 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1600:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1602:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1604:	b2c0      	uxtb	r0, r0
}
    1606:	4770      	bx	lr

00001608 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1608:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    160a:	7e18      	ldrb	r0, [r3, #24]
    160c:	2301      	movs	r3, #1
    160e:	4018      	ands	r0, r3
}
    1610:	4770      	bx	lr

00001612 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1612:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1614:	7e18      	ldrb	r0, [r3, #24]
    1616:	0780      	lsls	r0, r0, #30
    1618:	0fc0      	lsrs	r0, r0, #31
}
    161a:	4770      	bx	lr

0000161c <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    161c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    161e:	7e18      	ldrb	r0, [r3, #24]
    1620:	0740      	lsls	r0, r0, #29
    1622:	0fc0      	lsrs	r0, r0, #31
}
    1624:	4770      	bx	lr
	...

00001628 <__libc_init_array>:
    1628:	b570      	push	{r4, r5, r6, lr}
    162a:	2600      	movs	r6, #0
    162c:	4d0c      	ldr	r5, [pc, #48]	; (1660 <__libc_init_array+0x38>)
    162e:	4c0d      	ldr	r4, [pc, #52]	; (1664 <__libc_init_array+0x3c>)
    1630:	1b64      	subs	r4, r4, r5
    1632:	10a4      	asrs	r4, r4, #2
    1634:	42a6      	cmp	r6, r4
    1636:	d109      	bne.n	164c <__libc_init_array+0x24>
    1638:	2600      	movs	r6, #0
    163a:	f000 f88b 	bl	1754 <_init>
    163e:	4d0a      	ldr	r5, [pc, #40]	; (1668 <__libc_init_array+0x40>)
    1640:	4c0a      	ldr	r4, [pc, #40]	; (166c <__libc_init_array+0x44>)
    1642:	1b64      	subs	r4, r4, r5
    1644:	10a4      	asrs	r4, r4, #2
    1646:	42a6      	cmp	r6, r4
    1648:	d105      	bne.n	1656 <__libc_init_array+0x2e>
    164a:	bd70      	pop	{r4, r5, r6, pc}
    164c:	00b3      	lsls	r3, r6, #2
    164e:	58eb      	ldr	r3, [r5, r3]
    1650:	4798      	blx	r3
    1652:	3601      	adds	r6, #1
    1654:	e7ee      	b.n	1634 <__libc_init_array+0xc>
    1656:	00b3      	lsls	r3, r6, #2
    1658:	58eb      	ldr	r3, [r5, r3]
    165a:	4798      	blx	r3
    165c:	3601      	adds	r6, #1
    165e:	e7f2      	b.n	1646 <__libc_init_array+0x1e>
    1660:	00001760 	.word	0x00001760
    1664:	00001760 	.word	0x00001760
    1668:	00001760 	.word	0x00001760
    166c:	00001764 	.word	0x00001764

00001670 <memcpy>:
    1670:	2300      	movs	r3, #0
    1672:	b510      	push	{r4, lr}
    1674:	429a      	cmp	r2, r3
    1676:	d100      	bne.n	167a <memcpy+0xa>
    1678:	bd10      	pop	{r4, pc}
    167a:	5ccc      	ldrb	r4, [r1, r3]
    167c:	54c4      	strb	r4, [r0, r3]
    167e:	3301      	adds	r3, #1
    1680:	e7f8      	b.n	1674 <memcpy+0x4>

00001682 <memset>:
    1682:	0003      	movs	r3, r0
    1684:	1882      	adds	r2, r0, r2
    1686:	4293      	cmp	r3, r2
    1688:	d100      	bne.n	168c <memset+0xa>
    168a:	4770      	bx	lr
    168c:	7019      	strb	r1, [r3, #0]
    168e:	3301      	adds	r3, #1
    1690:	e7f9      	b.n	1686 <memset+0x4>
    1692:	0000      	movs	r0, r0
    1694:	00000866 	.word	0x00000866
    1698:	00000898 	.word	0x00000898
    169c:	000008a2 	.word	0x000008a2
    16a0:	00000898 	.word	0x00000898
    16a4:	000008d6 	.word	0x000008d6
    16a8:	00000898 	.word	0x00000898
    16ac:	0000091e 	.word	0x0000091e
    16b0:	00000898 	.word	0x00000898
    16b4:	0000097a 	.word	0x0000097a
    16b8:	00000898 	.word	0x00000898
    16bc:	000009f2 	.word	0x000009f2
    16c0:	00000898 	.word	0x00000898
    16c4:	00000a4e 	.word	0x00000a4e
    16c8:	00000898 	.word	0x00000898
    16cc:	00000a82 	.word	0x00000a82
    16d0:	682f2e2e 	.word	0x682f2e2e
    16d4:	732f6c61 	.word	0x732f6c61
    16d8:	682f6372 	.word	0x682f6372
    16dc:	665f6c61 	.word	0x665f6c61
    16e0:	6873616c 	.word	0x6873616c
    16e4:	0000632e 	.word	0x0000632e
    16e8:	682f2e2e 	.word	0x682f2e2e
    16ec:	732f6c61 	.word	0x732f6c61
    16f0:	682f6372 	.word	0x682f6372
    16f4:	695f6c61 	.word	0x695f6c61
    16f8:	00632e6f 	.word	0x00632e6f
    16fc:	682f2e2e 	.word	0x682f2e2e
    1700:	732f6c61 	.word	0x732f6c61
    1704:	682f6372 	.word	0x682f6372
    1708:	755f6c61 	.word	0x755f6c61
    170c:	74726173 	.word	0x74726173
    1710:	6e79735f 	.word	0x6e79735f
    1714:	00632e63 	.word	0x00632e63
    1718:	682f2e2e 	.word	0x682f2e2e
    171c:	6e2f6c70 	.word	0x6e2f6c70
    1720:	74636d76 	.word	0x74636d76
    1724:	682f6c72 	.word	0x682f6c72
    1728:	6e5f6c70 	.word	0x6e5f6c70
    172c:	74636d76 	.word	0x74636d76
    1730:	632e6c72 	.word	0x632e6c72
    1734:	00000000 	.word	0x00000000
    1738:	682f2e2e 	.word	0x682f2e2e
    173c:	732f6c70 	.word	0x732f6c70
    1740:	6f637265 	.word	0x6f637265
    1744:	70682f6d 	.word	0x70682f6d
    1748:	65735f6c 	.word	0x65735f6c
    174c:	6d6f6372 	.word	0x6d6f6372
    1750:	0000632e 	.word	0x0000632e

00001754 <_init>:
    1754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1756:	46c0      	nop			; (mov r8, r8)
    1758:	bcf8      	pop	{r3, r4, r5, r6, r7}
    175a:	bc08      	pop	{r3}
    175c:	469e      	mov	lr, r3
    175e:	4770      	bx	lr

00001760 <__init_array_start>:
    1760:	000000e5 	.word	0x000000e5

00001764 <_fini>:
    1764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1766:	46c0      	nop			; (mov r8, r8)
    1768:	bcf8      	pop	{r3, r4, r5, r6, r7}
    176a:	bc08      	pop	{r3}
    176c:	469e      	mov	lr, r3
    176e:	4770      	bx	lr

00001770 <__fini_array_start>:
    1770:	000000bd 	.word	0x000000bd
